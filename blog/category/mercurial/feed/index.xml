<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     >
  <channel>
    <title>Gregory Szorc's Digital Home</title>
    <link>http://gregoryszorc.com/blog</link>
    <description>Rambling on</description>
    <pubDate>Tue, 28 Jan 2014 00:33:26 GMT</pubDate>
    <generator>Blogofile</generator>
    <sy:updatePeriod>hourly</sy:updatePeriod>
    <sy:updateFrequency>1</sy:updateFrequency>
    <item>
      <title>Aggregating Version Control Info at Mozilla</title>
      <link>http://gregoryszorc.com/blog/2014/01/21/aggregating-version-control-info-at-mozilla</link>
      <pubDate>Tue, 21 Jan 2014 10:50:00 PST</pubDate>
      <category><![CDATA[Git]]></category>
      <category><![CDATA[Mercurial]]></category>
      <category><![CDATA[Mozilla]]></category>
      <category><![CDATA[Python]]></category>
      <guid isPermaLink="true">http://gregoryszorc.com/blog/2014/01/21/aggregating-version-control-info-at-mozilla</guid>
      <description>Aggregating Version Control Info at Mozilla</description>
      <content:encoded><![CDATA[<p>Over the winter break, I set out on an ambitious project to create
a service to help developers and others manage the flury
of patches going into Firefox. While the project is far from complete,
I'm ready to unleash the first part of the project upon the world.</p>
<p>If you point your browsers to
<a href="http://moztree.gregoryszorc.com/">moztree.gregoryszorc.com</a>, you'll
hopefully see some documentation about what I've built.
<a href="https://bitbucket.org/indygreg/moz-tree-utopia">Source code</a> is
available and free, of course. Patches very welcome.</p>
<p>Essentially, I built a centralized indexing service for version
control repositories with Mozilla's extra metadata thrown in.
I tell it what repositories to mirror, and it clones everything,
fetches data such as the pushlog and Git SHA-1 mappings, and
stores everything in a central database. It then exposes this
aggregated data through world-readable web services.</p>
<p>Currently, I have the service indexing the popular project branches
for Firefox (central, aurora, beta, release, esr, b2g, inbound, fx-team,
try, etc). You can view the
<a href="http://moztree.gregoryszorc.com/api/repos">full list</a> via the web
service. As a bonus, I'm also serving these repositories via
<a href="http://hg.gregoryszorc.com/">hg.gregoryszorc.com</a>. My server appears
to be significantly faster than
<a href="https://hg.mozilla.org">hg.mozilla.org</a>. If you want to use it for
your daily needs, go for it. I make no SLA guarantees, however.</p>
<p>I'm also using this service as an opportunity to experiment with
alternate forms of Mercurial hosting. I have mirrors of mozilla-central
and the try repository with generaldelta and lz4 compression enabled.
I may blog about what those are eventually. The teaser is that they can
make Mercurial perform a lot faster under some conditions. I'm also
using ZFS under the hood to manage repositories. Each repository is a
ZFS filesystem. This means I can create repository copies on the server
(user repositories anyone?) at a nearly free cost. Contrast this to the
traditional method of full clones, which take lots of time, memory, CPU,
and storage.</p>
<p>Anyway, some things you can do with the existing web service:</p>
<ul>
<li>Obtain metadata about Mercurial changesets.
  <a href="http://moztree.gregoryszorc.com/api/changeset/940b2974f35b">Example</a>.</li>
<li>Look up metadata about Git commits.
  <a href="http://moztree.gregoryszorc.com/api/git-sha1/40438af67c321">Example</a>.</li>
<li>Obtain a <a href="http://moztree.gregoryszorc.com/api/spore">SPORE descriptor</a>
  describing the web service endpoints. This allows you to auto-generate
  clients from descriptors. Yay!</li>
</ul>
<p>Obviously, that's not a lot. But adding new endpoints is relatively
straightforward. See the <a href="https://bitbucket.org/indygreg/moz-tree-utopia/src/tip/repodata/web/app.py">source</a>.
It's literally as easy as defining a URL mapping and writing a
database query.</p>
<p>The performance is also not the best. I just haven't put in the effort
to tune things yet. All of the querying hits the database, not
Mercurial. So, making things faster should merely be a matter of
database and hosting optimization. Patches welcome!</p>
<p>Some ideas that I haven't had time to implement yet:</p>
<ul>
<li>Return changests in a specific repository</li>
<li>Return recently pushed changesets</li>
<li>Return pushes for a given user</li>
<li>Return commits for a given author</li>
<li>Return commits referencing a given bug</li>
<li>Obtain TBPL URLs for pushes with changeset</li>
<li>Integrate bugzilla metadata</li>
</ul>
<p>Once those are in place, I foresee this service powering a number of
dashboards. Patches welcome.</p>
<p>Again, this service is only the tip of what's possible. There's a lot
that could be built on this service. I have ideas. Others have ideas.</p>
<p>The project includes a Vagrant file and Puppet
manifests for provisioning the server. It's a one-liner to get a
development environment up and running. It should be really easy to
contribute to this project. Patches welcome.</p>]]></content:encoded>
    </item>
    <item>
      <title>Things Mozilla Could Do with Mercurial</title>
      <link>http://gregoryszorc.com/blog/2014/01/17/things-mozilla-could-do-with-mercurial</link>
      <pubDate>Fri, 17 Jan 2014 15:00:00 PST</pubDate>
      <category><![CDATA[Mercurial]]></category>
      <category><![CDATA[Mozilla]]></category>
      <guid isPermaLink="true">http://gregoryszorc.com/blog/2014/01/17/things-mozilla-could-do-with-mercurial</guid>
      <description>Things Mozilla Could Do with Mercurial</description>
      <content:encoded><![CDATA[<p>As I've <a href="/blog/category/mercurial/">written before</a>, Mercurial is a
highly extensible version control system. You can do things with
Mercurial you can't do in other version control systems.</p>
<p>In this post, I'll outline some of the cool things Mozilla could do with
Mercurial. But first, I want to outline some features of Mercurial that
many don't know exist.</p>
<h2>pushkey and listkeys command</h2>
<p>The Mercurial wire protocol (how two Mercurial peer repositories
talk to each other over a network) contains two very useful commands:
<em>pushkey</em> and <em>listkeys</em>. These commands allow the storage and listing
of arbitrary key-value pair metadata in the repository.</p>
<p>This generic storage mechanism is how Mercurial stores and synchronizes
bookmarks and phases information, for example.</p>
<p>By implementing a Mercurial extension, you can have Mercurial store
key-value data for any arbitrary data namespace. You can then write
a simple extension that synchronizes this data as part of the push
and pull operations.</p>
<h2>Extending the wire protocol</h2>
<p>For cases where you want to transmit arbitrary data to/from Mercurial
servers and where the <em>pushkey</em> framework isn't robust enough, it's
possible to implement custom commands in the Mercurial wire protocol.</p>
<p>A server installs an extension making the commands available. A client
installs an extension knowing how to use the commands. Arbitrary data
is transferred or custom actions are performed.</p>
<p>When it comes to custom commands, the sky is really the limit. You
could do pretty much anything from transfer extra data types (this
is how the <a href="http://mercurial.selenic.com/wiki/LargefilesExtension">largefiles extension</a>
works) to writing commands that interact with remote agents.</p>
<h2>Custom revision set queries and templating</h2>
<p>Mercurial offers a rich framework for querying repository data and
for formatting data. The querying is called <em>revision sets</em> and the
later <em>templates</em>. If you are unfamiliar with the feature, I
encourage you to run <em>hg help revset</em> and <em>hg help templates</em> right
now to discover the awesomeness.</p>
<p>As I've <a href="/blog/2013/11/08/using-mercurial-to-query-mozilla-metadata/">demonstrated</a>,
you can do some very nifty things with custom revision sets and
templating!</p>
<h2>The possibilities</h2>
<p>Now that you know some ways Mercurial can be extended, let's talk about
some cool use cases at Mozilla. I want to be clear that I'm not
advocating we do these things, just that they are possible and maybe
they are a little cool.</p>
<h3>Storing pushlog data</h3>
<p>Mozilla records information about who pushed what changesets where and
when in what's called the <em>pushlog</em>. The pushlog data is currently
stored in a SQLite database inside the repository on the server. The
data is made available via a HTTP+JSON API.</p>
<p>We could go a step further and make the pushlog data available via
<em>listkeys</em> so Mercurial clients could download pushlog data with the
same channel used to pull core repository data. (Currently, we have
to open a new TCP connection and talk to the HTTP+JSON API.) This
would make fetching of pushlog data faster, especially for clients
on slow connections.</p>
<p>I concede this is an iterative improvement and adds little value beyond
what we currently have. But if I were designing pushlog storage from
scratch, this is how I'd do it.</p>
<h3>Storing a changeset's automation results</h3>
<p>The <em>pushkey</em> framework could be used to mark specific changesets
as passing automation. When release automation or a sheriff determines
that a changeset/push is green, they could issue an authenticated
<em>pushkey</em> command to the Mercurial server stating such. Clients
could then easily obtain a list of all changesets that are green.</p>
<p>Why stop there? We could also record automation failures in Mercurial as
well. Depending on how complex this gets, we may outgrow <em>pushkey</em>
and require a separate command. But that's all doable.</p>
<p>Anyway, clients could download automation results for a specific
changeset as part of the repository data. The same extension that
pulls down that data could also monkeypatch the bisection algorithm used
by <em>hg bisect</em> to automatically skip over changesets that didn't pass
automation. You'll never bisect a backed out changeset again!</p>
<p>If this automation data were stored on the Try repository, the autoland
tool would just need to query the Mercurial repo to see which changesets
are candidates for merging into mainline - there would be no need for
a separate database and web service!</p>
<h3>Marking a changeset as reviewed</h3>
<p>Currently, Mozilla's review procedure is very patch and Bugzilla
centric. But it doesn't have to be that way. (I argue it shouldn't be
that way.)</p>
<p>Imagine a world where code review is initiated by pushing changesets
to a special server, kind of like how Try magically turns pushes into
automation jobs.</p>
<p>In this world, reviews could be initiated by issuing a <em>pushkey</em>
or custom command to the server. This could even initiate
server-side static analysis that would hold off publishing the review
unless static analysis checks passed!</p>
<p>Granted review could be recorded by having someone issue a
<em>pushkey</em> command to mark a changeset as reviewed. The channel to the
Mercurial server is authenticated via SSH, so the user behind the
current SSH key is the reviewer. The Mercurial server could store this
username as part of the repository data. The autoland tool could then
pull down the reviewer data and only consider changesets that have an
appropriate reviewer.</p>
<p>It <em>might</em> also be possible to integrate crypto magic into this
workflow so reviewers could digitally sign a changeset as reviewed.
This could help with the verification of the Firefox source code
that Brendan Eich <a href="https://brendaneich.com/2014/01/trust-but-verify/">recently outlined</a>.</p>
<p>Like the automation data above, no separate
database would be required: all data would be part of the repository.
All you need to build is a Mercurial extension.</p>
<h3>Encouraging best practices</h3>
<p>Mozillians have written a handful of useful Mercurial extensions to
help people become more productive. We have also noticed that many
developers are still (unknowingly?) running old, slow, and buggy
Mercurial releases. We want people to have the best experience possible.
How do we do that?</p>
<p>One idea is to install an extension on the server that strongly
recommands or even requires users follow best practices (minimal HG
version, installed extensions, etc).</p>
<p>I have developed a <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=941856">proof-of-concept</a>
that does just this.</p>
<h3>Rich querying of metadata</h3>
<p>When you start putting more metadata into Mercurial (or at least write
Mercurial extensions to aggregate this metadata), all kinds of
interesting query opportunities open up. Using revsets and templates,
you can do an awful lot to use Mercurial as a database of sorts
to extract useful reports.</p>
<p>I dare say reports like
<a href="http://oduinn.com/blog/2013/12/03/infrastructure-load-for-november-2013/">John O'duinn's Monthly Infrastructure Load</a>
posts could be completely derived from Mercurial. I've
<a href="/blog/2013/11/08/using-mercurial-to-query-mozilla-metadata/">demonstrated</a>
this ability previously. That's only the tip of the iceburg.</p>
<h2>Summary</h2>
<p>We could enable a lot of new and useful scenarios by extending
Mercurial. We could accomplish this without introducing new
services and tools into our already complicated infrastructure
and workflows.</p>
<p>The possibilities I've suggested are by no means exhaustive. I encourage
others to dream up new and interesting ideas. Who knows, maybe some of
them may actually happen.</p>]]></content:encoded>
    </item>
    <item>
      <title>Importance of Hosting Your Version Control Server</title>
      <link>http://gregoryszorc.com/blog/2013/11/13/importance-of-hosting-your-version-control-server</link>
      <pubDate>Wed, 13 Nov 2013 09:25:00 PST</pubDate>
      <category><![CDATA[Git]]></category>
      <category><![CDATA[Mercurial]]></category>
      <category><![CDATA[Mozilla]]></category>
      <guid isPermaLink="true">http://gregoryszorc.com/blog/2013/11/13/importance-of-hosting-your-version-control-server</guid>
      <description>Importance of Hosting Your Version Control Server</description>
      <content:encoded><![CDATA[<p>The subject of where to host version control repositories comes up a lot
at Mozilla. It takes many forms:</p>
<ul>
<li>We should move the Firefox repository to GitHub</li>
<li>I should be allowed to commit to GitHub</li>
<li>I want the canonical repository to be hosted by Bitbucket</li>
</ul>
<p>When Firefox development is concerned, Release Engineerings puts down
their foot and insists the canonical repository be hosted by Mozilla,
under a Mozilla hostname. When that's not possible, they set up a mirror
on Mozilla infrastructure.</p>
<p>I think a
<a href="https://groups.google.com/d/topic/jenkinsci-dev/-myjRIPcVwU/discussion">recent issue with the Jenkins project</a>
demonstrates why hosting your own version control server is important.
The gist is someone force pushed to a bunch of repos hosted on GitHub.
They needed to involve GitHub support to recover from the issue. While
it appears they largely recovered (and GitHub support deserves kudos - I
don't want to take away from their excellence), this problem would have
been avoided or the response time significantly decreased if the Jenkins
people had direct control over the Git server: they either could have
installed a custom hook that would have prevented the pushes or had
access to the reflog so they could have easily seen the last pushed
revision and easily forced pushed back to it. GitHub doesn't have a
mechanism for defining pre-* hooks, doesn't allow defining custom
hooks (a security and performance issue for them), and doesn't
expose the reflog data.</p>
<p>Until repository hosting services expose full repository data (such as
reflogs) and allow you to define custom hooks, accidents like these will
happen and the recovery time will be longer than if you hosted the repo
yourself.</p>
<p>It's possible repository hosting services like GitHub and Bitbucket will
expose these features or provide a means to quickly recover. If so,
kudos to them. But larger, more advanced projects will likely employ
custom hooks and considering custom hooks are a massive security and
performance issue for any hosted service provider, I'm not going to
hold my breath this particular feature is rolled out any time soon.
This is unfortunate, as it makes projects seemingly choose between
low risk/low convenience and GitHub's vibrant developer community.</p>]]></content:encoded>
    </item>
    <item>
      <title>Mercurial 2.8 released</title>
      <link>http://gregoryszorc.com/blog/2013/11/08/mercurial-2.8-released</link>
      <pubDate>Fri, 08 Nov 2013 14:30:00 PST</pubDate>
      <category><![CDATA[Mercurial]]></category>
      <category><![CDATA[Mozilla]]></category>
      <guid isPermaLink="true">http://gregoryszorc.com/blog/2013/11/08/mercurial-2.8-released</guid>
      <description>Mercurial 2.8 released</description>
      <content:encoded><![CDATA[<p><a href="http://mercurial.selenic.com/">Mercurial</a> 2.8 has been released.</p>
<p>The <a href="http://mercurial.selenic.com/wiki/WhatsNew#Mercurial_2.8_.282013-11-1.29">changes</a>
aren't as sexy as previous releases. But there are a handful of bug
fixes that seem useful to pull in. People may also find the new <em>shelve</em>
extension useful.</p>
<p>I encourage Mozillians to keep their Mercurial up to date. I once went
around the San Francisco office and stood behind people as they
upgraded to a modern Mercurial. For the next few weeks I was hearing a
lot of "OMG Mercurial is so much better now." Don't handicap yourself by
running an older, buggy Mercurial.</p>
<p>If you don't yet feel comfortable running 2.8, 2.7 should be safe.</p>]]></content:encoded>
    </item>
    <item>
      <title>Using Mercurial to query Mozilla metadata</title>
      <link>http://gregoryszorc.com/blog/2013/11/08/using-mercurial-to-query-mozilla-metadata</link>
      <pubDate>Fri, 08 Nov 2013 09:42:00 PST</pubDate>
      <category><![CDATA[Mercurial]]></category>
      <category><![CDATA[Mozilla]]></category>
      <guid isPermaLink="true">http://gregoryszorc.com/blog/2013/11/08/using-mercurial-to-query-mozilla-metadata</guid>
      <description>Using Mercurial to query Mozilla metadata</description>
      <content:encoded><![CDATA[<p>I have updated my
<a href="https://hg.mozilla.org/users/gszorc_mozilla.com/hgext-gecko-dev">Mercurial extension tailored for Gecko/Firefox development</a>
with features that support rich querying of Mozilla/Gecko-development
specific metadata!</p>
<p>The extension now comes with a bug full of
<a href="http://www.selenic.com/hg/help/revsets">revision set</a> selectors and
<a href="http://www.selenic.com/hg/help/templates">template keywords</a>. You can
use them to query and format Mozilla-central metadata from the
repository.</p>
<h2>Revision set selectors</h2>
<p>You can now select changesets referencing a specific bug number:</p>
<pre><code>hg log -r 'bug(931383)'
</code></pre>
<p>Or that were reviewed by a specific person:</p>
<pre><code>hg log -r 'reviewer(gps)'
</code></pre>
<p>Or were reviewed or not reviewed:</p>
<pre><code>hg log -r 'reviewed()'
hg log -r 'not reviewed()'
</code></pre>
<p>You can now select changesets that are present in a specific tree:</p>
<pre><code>hg log -r 'tree(central)'
</code></pre>
<p>I've also introduced support to query changesets <em>you</em> influenced:</p>
<pre><code>hg log -r 'me()'
</code></pre>
<p>(This finds changesets you authored or reviewed.)</p>
<p>You can select changesets that initially landed on a specific tree:</p>
<pre><code>hg log -r 'firstpushtree(central)'
</code></pre>
<p>You can select changesets marked as <em>DONTBUILD</em>:</p>
<pre><code>hg log -r 'dontbuild()'
</code></pre>
<p>You can select changesets that don't reference a bug:</p>
<pre><code>hg log -r 'nobug()'
</code></pre>
<p>You can select changesets that were <em>push heads</em> for a tree:</p>
<pre><code>hg log -r 'pushhead(central)'
</code></pre>
<p>(This would form the basis of a push-aware bisection tool - an excellent
idea for a future feature in this extension.)</p>
<p>You can combine these revset selector functions with other revset
selectors to do some pretty powerful things.</p>
<p>To select all changesets on inbound but not central:</p>
<pre><code>hg log -r 'tree(inbound) - tree(central)'
</code></pre>
<p>To find all your contributions on beta but not release:</p>
<pre><code>hg log -r 'me() &amp; (tree(beta) - tree(release))'
</code></pre>
<p>To find all changesets referencing a specific bug that have landed in
Aurora:</p>
<pre><code>hg log -r 'bug(931383) and tree(aurora)'
</code></pre>
<p>To find all changesets marked <em>DONTBUILD</em> that landed directly on central:</p>
<pre><code>hg log -r 'dontbuild() and firstpushtree(central)'
</code></pre>
<p>To find all non-merge changesets that don't reference a bug:</p>
<pre><code>hg log -r 'not merge() and nobug()'
</code></pre>
<p>Neato!</p>
<h2>Template keywords</h2>
<p>You can also now print some Mozilla information when using templates.</p>
<p>To print the main bug of a changeset, use:</p>
<pre><code>{bug}
</code></pre>
<p>To retrieve all referenced bugs:</p>
<pre><code>{bugs} {join(bugs, ', ')}
</code></pre>
<p>To print the reviewers:</p>
<pre><code>{reviewer} {join(reviewers, ', ')}
</code></pre>
<p>To print the first version a changeset appeared in a specific channel:</p>
<pre><code>{firstrelease} {firstbeta} {firstaurora} {firstnightly}
</code></pre>
<p>To print the <strong>estimated</strong> first Aurora and Nightly date for a
changeset, use:</p>
<pre><code>{auroradate} {nightlydate}
</code></pre>
<p>(Getting the exact first Aurora and Nightly dates requires consulting
3rd party services, which we don't currently do. I'd like to
eventually integrate these into the extension. For now, it just
estimates dates from the pushlog data.)</p>
<p>You can also print who and where pushed a changeset:</p>
<pre><code>{firstpushuser} {firstpushtree}
</code></pre>
<p>You can also print the TBPL URL with the results of the first push:</p>
<pre><code>{firstpushtbpl}
</code></pre>
<p>Here is an example that prints channel versions and dates for each
changesets:</p>
<pre><code>hg log --template '{rev} Nightly: {firstnightly} {nightlydate}; Aurora {firstaurora} {auroradate}; Beta: {firstbeta}; Release: {firstrelease}\n'
</code></pre>
<h2>Putting it all together</h2>
<p>Of course, you can combine selectors and templates to create some
mighty powerful queries.</p>
<p>To look at your impact on Mozilla, do something like:</p>
<pre><code>hg log --template '{rev} Bug {bug}; Release {firstrelease}\n' -r 'me()'
</code></pre>
<p>You can easily forumate a status report for your activity in the past
week:</p>
<pre><code>hg log --template '{firstline(desc)}\n' -r 'firstpushdate(-7) and me()'
</code></pre>
<p>You can also query Mercurial to see where changesets have been landing
in the past 30 days:</p>
<pre><code>hg log --template '{firstpushtree}\n' -r 'firstpushdate(-30)' | sort | uniq -c
</code></pre>
<p>You can see who has been reviewing lots of patches lately:</p>
<pre><code>hg log --template '{join(reviewers, "\n")}\n' -r 'firstpushdate(-30)' | sort | uniq -c | sort -n
</code></pre>
<p>(smaug currently has the top score, edging out my 116 reviews with 137.)</p>
<p>If you want to reuse templates (instead of having to type them on the
command line), you can save them as <em>style files</em>. Search
<a href="https://www.google.com/search?q=mercurial+style+files">the Internets</a>
to learn how to use them. You can even change your default style so
the default output from <em>hg log</em> contains everything you'd ever want to
know about a changeset!</p>
<h2>Keeping it running</h2>
<p>Many of the queries rely on data derived from multiple repositories and
pushlog data that is external to the repository.</p>
<p>To get best results, you'll need to be running a monolithic/unified
Mercurial repository. You can either assemble one locally with this
extension by periodically pulling from the separate repos:</p>
<pre><code>hg pull releases
hg pull integration
</code></pre>
<p>Or, you can pull from
<a href="http://hg.gregoryszorc.com/gecko">my personal unified repo</a>.</p>
<p>You will also need to ensure the pushlog data is current. If you pull
directly from the official repos, this will happen automatically. To be
sure, run:</p>
<pre><code>hg pushlogsync
</code></pre>
<p>Finally, you can force a repopulation of cached bug data by running:</p>
<pre><code>hg buginfo --reset
</code></pre>
<p>Over time, I want all this to automagically work. Stay tuned.</p>
<h2>Comments and future improvements</h2>
<p>I implemented this feature to save myself from having to go troving
through Bugzilla and repository history to answer questions and to
obtain metrics. I can now answer many questions via simple Mercurial
one-liners.</p>
<p>Custom revision set selectors and template keywords are a pretty nifty
feature of Mercurial. They demonstrate how you can extend Mercurial to
be aware of more than just tracking commits and files. As I've
<a href="/blog/2013/05/12/thoughts-on-mercurial-%28and-git%29/">said before</a>
and will continue to say, the extensibility of Mercurial is
really its killer feature, especially for organizations with
well-defined processes (like Mozilla). The kind of extensibility I
achieved with this extension with custom queries and formatting
functions is just not possible with Git (at least not with the reference
C implementation that the overwhelming majority of Git users use).</p>
<p>There are numerous improvements that can be made to the extension.
Obviously more revision set selectors and template keywords can be
added. The parsing routine to extract bugs and reviewers isn't the most
robust in the world. I copied some existing Mozilla code. It does well
at detecting string patters but doesn't cope well with extracting lists.</p>
<p>I'd also love to better integrate Mercurial with automation
results so you can do things like expose a <em>greenpush()</em> selector and do
things like <em>hg up -r 'last(tree(inbound)) and greenpush()'</em> (which
of course could be exposed as <em>lastgreen(inbound)</em>. Wouldn't
that be cool! (This would be possible if we had better APIs for querying
individual push results.) It would also be possible to have the
Mercurial server expose this data as repository data so clients pull it
automatically. That would prevent clients from all needing to query the
same 3rd party services. Just a crazy thought.</p>
<p>Speed can be an issue. Calculating the release information
(<em>{firstnightly}</em> etc) is currently slower than I'd like. This is mostly
due to me using inefficient algorithms and not caching things where I
should. Speed issues should be fixed in due time.</p>
<p>Please let me know if you run into any problems or have suggestions for
improvements. If you want to implement your own revision set selectors
or template keywords, it's <a href="https://hg.mozilla.org/users/gszorc_mozilla.com/hgext-gecko-dev/file/35bb3c96d786/__init__.py#l705">easier</a>
than you think! I will happily accept patches. Keep in mind that
Mercurial can integrate with 3rd party services. So if you want to
supplement repository data with data from a HTTP+JSON web service,
that's very doable. The sky is the limit.</p>]]></content:encoded>
    </item>
    <item>
      <title>Alternate Mercurial Server for Firefox Development</title>
      <link>http://gregoryszorc.com/blog/2013/10/17/alternate-mercurial-server-for-firefox-development</link>
      <pubDate>Thu, 17 Oct 2013 07:30:00 PDT</pubDate>
      <category><![CDATA[Mercurial]]></category>
      <category><![CDATA[Mozilla]]></category>
      <guid isPermaLink="true">http://gregoryszorc.com/blog/2013/10/17/alternate-mercurial-server-for-firefox-development</guid>
      <description>Alternate Mercurial Server for Firefox Development</description>
      <content:encoded><![CDATA[<p>I have <a href="/blog/2013/05/13/the-state-of-mercurial-at-mozilla/">long opined</a>
about the sad state of Mercurial at Mozilla. The short version is
Mozilla has failed to use Mercurial optimally, at least for Firefox
development. It's easy to see why so many Mozillians are quick to
discredit Mercurial when compared to Git!</p>
<p>I have a <a href="/blog/category/mercurial/">history</a> attempting to address the
deficiencies. Up to this point, I've been able to make things better
through local tooling. But, for my next set of tricks, I reached an
impasse with the Mercurial server at
<a href="https://hg.mozilla.org/">hg.mozilla.org</a>. So, I stood up my own
Mercurial server at
<a href="http://hg.gregoryszorc.com">hg.gregoryszorc.com/</a>!</p>
<p>This server is running Mercurial 2.7 and has a few nice features the
official Mercurial server at hg.mozilla.org does not.</p>
<h2>The repositories</h2>
<p><a href="http://hg.gregoryszorc.com/gecko">http://hg.gregoryszorc.com/gecko</a> is
a read-only unified Mercurial repository containing the commits for the
major Firefox/Gecko repositories. If you look at its
<a href="http://hg.gregoryszorc.com/gecko/bookmarks">bookmarks</a>, you'll see
something special: the heads of all the separate Mercurial repos it is
aggregating are being stored as bookmarks! (Bookmarks are effectively
Git branches.) The tip of mozilla-central is at the bookmark
<strong>central/default</strong>. The tip of Beta is at <strong>beta/default</strong>.
You get the idea. Once you clone this repo, you can easily switch
between <em>project branches</em> by running e.g. <strong>hg up central/default</strong>.
When you pull the repo, you get changesets for all repos by connecting
to one server, not several (this reduces load on Mozilla's servers and
is faster for clients).</p>
<p>This repository shares the same changesets/SHA-1's as the official
repositories. It just has everything under one roof. You can work out of
this repository and push to the official repositories. Although, you may
want to use the <em>pushtree</em> command from my
<a href="/blog/2013/07/22/mercurial-extension-for-gecko-development/">custom extension</a>
to make your life easier (<em>hg push</em> with no arguments will attempt to
push all changesets, which you definitely don't want when pushing to
e.g. mozilla-central).</p>
<p><a href="http://hg.gregoryszorc.com/gecko-collab">http://hg.gregoryszorc.com/gecko-collab</a>
is an offshoot of the <em>gecko</em> repo that you can push to. Changesets from
the <em>gecko</em> repo are pulled into it automatically.</p>
<p>What makes the <em>gecko-collab</em> repository special is that it has
<em>obsolescence</em> enabled. That is the core Mercurial feature enabling
<a href="http://mercurial.selenic.com/wiki/ChangesetEvolution">changeset evolution</a>.
More on that feature and why it is amazing in a future blog post. Stay tuned.</p>
<h2>Cloning</h2>
<p>If you would like to clone one of these unified repos, please do my
paltry EC2 server a favor and bootstrap your clone from an existing
clone. e.g. if you have a copy of mozilla-central sitting around but
don't want my repo's changesets to <em>pollute</em> it, do the following:</p>
<div class="pygments_murphy"><pre>hg clone mozilla-central gecko
<span class="nb">cd </span>gecko
hg pull http://hg.gregoryszorc.com/gecko
</pre></div>

<p>Or, if you are OK with your clone accumulating the extra changesets from
all the project branches, just run:</p>
<div class="pygments_murphy"><pre>hg pull http://hg.gregoryszorc.com/gecko
</pre></div>

<p>Don't forget to update the <em>[paths]</em> section in your <em>.hg/hgrc</em> file
to point to hg.gregoryszorc.com! e.g.</p>
<div class="pygments_murphy"><pre>[paths]
gecko = http://hg.gregoryszorc.com/gecko
collab = http://hg.gregoryszorc.com/gecko-collab
</pre></div>

<h2>Setting up push support and SSH keys</h2>
<p>If you would like to push to the
<a href="http://hg.gregoryszorc.com/gecko-collab">gecko-collab</a> repository,
you'll need to give me your SSH public key. But don't give me your key -
give an automated process your key!</p>
<p>Head on over to
<a href="http://phabricator.gregoryszorc.com">http://phabricator.gregoryszorc.com/</a>
and log in (look for the Persona button). Once you've logged in, go to your
settings by clicking the wrench icon in the top right. Then look for
<em>SSH Public Keys</em> to add your key(s). If you can't find it, just go to
<a href="http://phabricator.gregoryszorc.com/settings/panel/ssh/">http://phabricator.gregoryszorc.com/settings/panel/ssh/</a>.</p>
<p>Once your SSH public key is added, it will take up to a minute for it to
be added to my system. It's all automatic. You don't need to wait for
any manual action.</p>
<p>To connect to my server over SSH, you'll need to log in as the <em>hgssh</em>
user. e.g. in your <em>hgrc</em> file, add:</p>
<pre><code>[paths]
gecko = ssh://hgssh@hg.gregoryszorc.com/gecko
collab = ssh://hgssh@hg.gregoryszorc.com/gecko-collab
</code></pre>
<p>Then, you should be able to pull and push over SSH!</p>
<h2>Other Notes</h2>
<p>This server is running on an EC2 instance that isn't as powerful as I'd
like. Expect some operations to be slower than desired.</p>
<p>I don't guarantee an SLA for this service. It could go down at any
moment. However, Mercurial being a distributed version control system,
there should be little to no data loss assuming people pull frequently.
I know I have a backup on all my machines now.</p>
<p>I'm running this server for two main reasons.</p>
<p>First, I want to demonstrate the utility of a unified Mercurial server
for Firefox development in hopes we can run one officially. I've been
running a unified repo locally for a few months and I have little doubt
I'm more productive because of it. I want others to realize the
awesomeness.</p>
<p>Second, I needed a server that supported
<a href="http://mercurial.selenic.com/wiki/ChangesetEvolution">changeset evolution</a>
so I could play around with it. I <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=925383">asked</a>
the powers at be to enable it on hg.mozilla.org and didn't get a
response that met my timeline. So, I figured setting up my own server
was easier.</p>
<p>Please let me know if you have any questions or issues with this server.
I'd also love to hear whether people like the unified repo approach!</p>]]></content:encoded>
    </item>
    <item>
      <title>Mercurial setup wizard for Firefox development</title>
      <link>http://gregoryszorc.com/blog/2013/07/29/mercurial-setup-wizard-for-firefox-development</link>
      <pubDate>Mon, 29 Jul 2013 17:45:00 PDT</pubDate>
      <category><![CDATA[Mercurial]]></category>
      <category><![CDATA[Mozilla]]></category>
      <guid isPermaLink="true">http://gregoryszorc.com/blog/2013/07/29/mercurial-setup-wizard-for-firefox-development</guid>
      <description>Mercurial setup wizard for Firefox development</description>
      <content:encoded><![CDATA[<p>I'm a big fan of tools that encourage and/or enforce the following of
best practices and that help people become more productive.</p>
<p>One of the tools that Firefox developers interact with nearly daily is
Mercurial. As I've observed from coworkers and from community
contributors, many don't have Mercurial configured for optimal
development. For first-time contributors, this can manifest in patch
rejection - an experience that can be embarassing and demotivating. This
is frustrating to me because most issues are easily identifiable and
correctable. And, when addressed, everyone wins.</p>
<p>Anyway, I'm pleased to announce that there is now a configuration wizard
in the Firefox source tree to help with configuring Mercurial. To run it,
just type:</p>
<pre><code>./mach mercurial-setup
</code></pre>
<p>Currently, it's aimed for first-time contributors. So, it's missing
things that more seasoned developers rely on. But you need to start
somewhere, right?</p>
<p>Currently, the tool isn't advertised anywhere other than <em>mach help</em>.
Please run it and report issues in
<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=794580">bug 794580</a> or
file a new report. Once things have baked in, I'd like to add some kind
of notification/tips system to mach where it will encourage you to do
things like automatically run <em>mach mercurial-setup</em>. Until then, I
recommend trying to remember to run <em>mach mercurial-setup</em> every few
weeks to ensure your Mercurial environment is up to date and properly
configured.</p>
<p>I'd like to thank Nick Alexander for sharing my enthusiasm for helping
contributors and for taking the time to review this work.</p>]]></content:encoded>
    </item>
    <item>
      <title>Track pushes and train riding with Mercurial</title>
      <link>http://gregoryszorc.com/blog/2013/07/25/track-pushes-and-train-riding-with-mercurial</link>
      <pubDate>Thu, 25 Jul 2013 13:10:00 PDT</pubDate>
      <category><![CDATA[Mercurial]]></category>
      <category><![CDATA[Mozilla]]></category>
      <guid isPermaLink="true">http://gregoryszorc.com/blog/2013/07/25/track-pushes-and-train-riding-with-mercurial</guid>
      <description>Track pushes and train riding with Mercurial</description>
      <content:encoded><![CDATA[<p>My <a href="https://hg.mozilla.org/users/gszorc_mozilla.com/hgext-gecko-dev">Mercurial extension for Firefox development</a>
now has an initial implementation of pushlog aggregation and searching.</p>
<p>You first start by synchronizing the pushlog data on Mozilla's servers
with the local client:</p>
<pre><code>hg pushlogsync
</code></pre>
<p>This takes a while the first time you run it because it has to download
all the data. On subsequent runs, it only downloads new data, so it
should be much faster.</p>
<p>Then, you can search for the push history of a changeset:</p>
<div class="pygments_murphy"><pre>$ hg changesetpushes -a b968708558b9
133967:b968708558b9 Bug 839809:  Make counter-increments and list counting that would go past our internal (int32_t) limit keep the counter at its current value rather than wrapping.  r=dholbert

Per CSS WG resolution regarding counter-styles-3, afternoon of 2013-02-05:
http://krijnhoetmer.nl/irc-logs/css/20130205#l-1590
http://lists.w3.org/Archives/Public/www-style/2013Feb/0392.html

Note that this patch depends on signed integer overflow behavior in C++,
which I believe is portable despite being unspecified.
Tree      Date                Username              Build Info
inbound   2013-02-21T18:12:57 dbaron@mozilla.com    https://tbpl.mozilla.org/?tree=Mozilla-Inbound&amp;rev=85b91048c1cd
central   2013-02-22T09:43:12 ryanvm@gmail.com      https://tbpl.mozilla.org/?tree=Mozilla-Central&amp;rev=3a7d4085787e
build     2013-02-22T14:31:42 gszorc@mozilla.com    https://tbpl.mozilla.org/?tree=Build-System&amp;rev=3a7d4085787e
fx-team   2013-02-25T01:04:44 ttaubert@mozilla.com  https://tbpl.mozilla.org/?tree=Fx-Team&amp;rev=31466fd86eb7
graphics  2013-02-25T20:02:57 mwoodrow@mozilla.com  https://tbpl.mozilla.org/?tree=Graphics&amp;rev=dcf53b7140cd
ash       2013-02-26T13:50:41 armenzg@mozilla.com   https://tbpl.mozilla.org/?tree=Ash&amp;rev=201b64ad48d8
services  2013-02-28T09:42:45 Ms2ger@gmail.com      https://tbpl.mozilla.org/?tree=Services-Central&amp;rev=31466fd86eb7
aurora    2013-04-01T13:50:56 bbajaj@mozilla.com    https://tbpl.mozilla.org/?tree=Mozilla-Aurora&amp;rev=60a3f369ccf0
beta      2013-05-13T09:59:38 lsblakk@mozilla.com   https://tbpl.mozilla.org/?tree=Mozilla-Beta&amp;rev=60a3f369ccf0
release   2013-06-17T15:53:19 akeybl@mozilla.com    https://tbpl.mozilla.org/?tree=Mozilla-Release&amp;rev=c54e3363712e
</pre></div>

<p>(The <em>-a</em> argument prints all trees instead of just the release trees).</p>
<p>I'd like to integrate bug tracking into the mix to facilitate
answering questions like <em>when did bug 123456 ride the trains</em>.</p>
<p>I'd also like to integrate release versions and build IDs into the mix.
For example, when I look up a changeset, I want to know the first build
on the Nightly, Aurora, Beta, and Release channels that change was
included in.</p>]]></content:encoded>
    </item>
    <item>
      <title>Mercurial Extension for Gecko Development</title>
      <link>http://gregoryszorc.com/blog/2013/07/22/mercurial-extension-for-gecko-development</link>
      <pubDate>Mon, 22 Jul 2013 10:27:00 PDT</pubDate>
      <category><![CDATA[Mercurial]]></category>
      <category><![CDATA[Mozilla]]></category>
      <guid isPermaLink="true">http://gregoryszorc.com/blog/2013/07/22/mercurial-extension-for-gecko-development</guid>
      <description>Mercurial Extension for Gecko Development</description>
      <content:encoded><![CDATA[<p>My weekend was spent hacking on Mercurial extensions. First, I worked on
<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=827123">porting the pushlog extension off SQLite</a>.
This will eventually enable Mozilla to move Mercurial hosting off NFS
and should make <a href="https://hg.mozilla.org/">hg.mozilla.org</a> much faster as
a result!</p>
<p>But the main purpose of this blog post is to introduce a new Mercurial
extension I wrote this weekend!</p>
<p>Gecko developers perform a number of common tasks with Mercurial, so I
thought it would be handy to package them up in an extension.</p>
<p>To install the extension:</p>
<pre><code>hg clone https://hg.mozilla.org/users/gszorc_mozilla.com/hgext-gecko-dev
</code></pre>
<p>Then add this extension to your hgrc file (either the global or
per-repository will suffice):</p>
<pre><code>[extensions]
mozext = /path/to/hgext-gecko-dev
</code></pre>
<p>Since I believe tools should be self-documenting, run the following for
usage info:</p>
<pre><code>$ hg help mozext
</code></pre>
<p>Here are some examples:</p>
<div class="pygments_murphy"><pre><span class="c"># Clone mozilla-central into the mc directory.</span>
hg clone central mc
hg clone mc mc

<span class="c"># Create a unified Mercurial repository containing changesets</span>
<span class="c"># from all the release repositories.</span>
hg cloneunified gecko

<span class="c"># Pull changes from the central and inbound repositories.</span>
hg pull central
hg pull inbound

<span class="c"># Update the working tree to the tip of inbound.</span>
hg up inbound/default

<span class="c"># View the tree open/closed status.</span>
hg treestatus

<span class="c"># Show a list of all known trees and their aliases.</span>
hg moztrees

<span class="c"># Open TBPL for the push containing a changeset.</span>
hg tbpl inbound 821e984ef423
hg tbpl inbound inbound/default

<span class="c"># Push the tip of inbound to mozilla-central</span>
hg pushtree -r inbound/default central
</pre></div>

<p>I've only tested this extension with Mercurial 2.6 (which every Mozilla
developer should be running). I'm not willing to support older versions.
Upgrade already!</p>
<p>There are a number of features I'd like to implement:</p>
<ul>
<li><strong>hg importtry</strong> - Automatically import changesets for a Try push into
  the repository.</li>
<li><strong>hg land</strong> - Automatically land patches on an integration tree (like
  inbound). Will handle rebasing automatically.</li>
<li><strong>hg critic</strong> - Perform stlye checking and other analysis on a
  changeset or group of changesets.</li>
<li>Ability to integrate build status into changeset info. This will allow
  things such as <em>pull only the last green changeset</em>. I'd also like a
  <em>build status</em> field to appear in the log output. Unfortunately, I
  believe the latency of the build lookup API is prohibitively high to
  perform the kind of tight integration I'd like.</li>
<li>Move <em>mozautomation</em> Python package into a standalone package or
  integrate already existing code (did I reinvent the wheel?).</li>
<li>Log fetching. Specify a changeset and fetch build/test logs.</li>
<li>Possibly move code into mozilla-central.</li>
<li>Possibly add mach commands for some of this functionality.</li>
</ul>
<p>There's no bug component for this extension (yet). If you find any
issues or wish to add a feature, just email a patch to me at gps@mozilla.com.</p>
<p>Please let me know if you find this useful or if you have any questions.</p>]]></content:encoded>
    </item>
    <item>
      <title>The State of Mercurial at Mozilla</title>
      <link>http://gregoryszorc.com/blog/2013/05/13/the-state-of-mercurial-at-mozilla</link>
      <pubDate>Mon, 13 May 2013 13:25:00 PDT</pubDate>
      <category><![CDATA[Mercurial]]></category>
      <category><![CDATA[Mozilla]]></category>
      <guid isPermaLink="true">http://gregoryszorc.com/blog/2013/05/13/the-state-of-mercurial-at-mozilla</guid>
      <description>The State of Mercurial at Mozilla</description>
      <content:encoded><![CDATA[<p>I have an opinion on the usage of Mercurial at Mozilla: it stinks.</p>
<p>Here's why.</p>
<h2>The server is configured poorly</h2>
<p>Our Mozilla server, hg.mozilla.org, is currently running Mercurial 2.0.2.
In terms of Mercurial features, stability, and performance, we are light
years behind.</p>
<p>You know that annoying phases configuration you need to set when pushing
to Try? That's because the server isn't new enough to tell the client the
same thing the configuration option does. It
<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=725362">will be fixed</a>
when the server is upgraded to 2.1+.</p>
<p>Furthermore, we are running the server over NFS, which introduces known
badness, including slowness.</p>
<p>I believe we blame Mercurial for issues that would go away if we
configured the Mercurial server properly.</p>
<p>Fortunately, it appears the
<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=781012">upgrade to 2.5</a>
is near and I've heard we're moving from NFS to local disk storage as
part of that. This should go a long way to making the server better.
The upgrade can't happen soon enough.</p>
<h2>User education is poor</h2>
<p>I think a lot of people are ignorant on the features and abilities of
Mercurial.</p>
<p>I commonly hear people are dissatisfied with the behavior of their
Mercurial client. They encounter performance issues, bugs, corruption,
etc. Nine times out of ten this is due to running an old Mercurial
release. Just last Friday someone on my team asked me about
weird behavior involving file case. My first question: <em>what version
of Mercurial are you using?</em> He was running 2.0.2. I told him to
upgrade to 2.5+. It fixed his problem. <strong>If you aren't running
Mercurial 2.5 or newer, upgrade immediately.</strong></p>
<p>I've heard people say we should switch to Git because Git has feature X.
Most of the time, Mercurial has these features. Unfortunately, people
just don't realize it. When I point them at
<a href="http://mercurial.selenic.com/wiki/UsingExtensions">Mercurial's extensions list</a>
their eyes light up and they thank me for making their lives easier.</p>
<p>I think a problem is a lot of new Mozilla contributors knew Git
before and only pick up the bare essentials of Mercurial that allow them
to land patches. They prefer Git because it is familiar and just don't
bother to pick up Mercurial. The potential of Mercurial is thus lost on
them.</p>
<p>Perhaps we should have a brown bag and/or better documentation on
getting the most out of Mercurial?</p>
<h2>The branching model is far from ideal</h2>
<p>For Gecko/Firefox development, we maintain separate repositories for the
trunk and release branches. This introduces all kinds of annoying.</p>
<p>We should not have separate repositories for <em>central</em>, <em>inbound</em>,
<em>aurora</em>, <em>beta</em>, <em>release</em>, etc. We should be using some combination of
branches and bookmarks and have all the release heads in one
repository, just like how the
<a href="https://github.com/mozilla/mozilla-central/">GitHub mirror</a> is
configured.</p>
<p>As an experiment, I created a
<a href="https://hg.mozilla.org/users/gszorc_mozilla.com/gecko">unified Mercurial repository</a>.
Each current repository is tracked as a bookmark (there are
<a href="https://developer.mozilla.org/en-US/docs/Developer_Guide/Source_Code/Mercurial">instructions</a>
for reproducing this). Unfortunately, the web interface isn't showing
bookmarks (perhaps because the version of Mercurial is too old?), so
you'll have to clone the repository to play around. Just run
<em>hg bookmarks</em> and e.g. <em>hg up aurora</em> after cloning.
<em>Warning: I'm not actively synchronizing this repository, so don't rely
on it being up to date</em>.</p>
<p>A Mercurial contributor (who is familiar with Mozilla's
development model) suggested we use Mercurial branches for every Gecko
release (20, 21, 22, etc). I think this and other uses of branches and
bookmarks are ideas worth exploring.</p>
<h2>We're failing to harness the extensibility</h2>
<p>Gecko/Firefox has a complicated code lifecycle and landing process.
This could be significantly streamlined if we fully harnessed and
embraced the extensibility of Mercurial. While there are some
Mozilla-centric extensions (details in my
<a href="/blog/2013/05/12/thoughts-on-mercurial-%28and-git%29/">recent post</a>),
I don't think they are well known nor used.</p>
<p>I think Mozilla should embrace the functionality of extensions like
these (whether they be for Mercurial, Git, or something else) and invest
resources in improving the workflows for all developers. Until these
tools are obviously superior and advertised, I believe many developers
will unknowingly continue to toil without them. And, it's likely hurting
our ability to attract and retain new contributors as well.</p>
<h2>Conclusion</h2>
<p>Mozilla's current usage of Mercurial is far from ideal. It's no wonder
people don't like Mercurial (and why some want to switch to Git).</p>
<p>Fortunately, little has to do with shortcomings of Mercurial itself (at
least with newer versions). If you want to know why Mercurial isn't
working too well for Gecko/Firefox development, most of the problems
are self-inflicted or the solutions reside within each of us. Time
will tell if we as a community have the will to address these issues.</p>]]></content:encoded>
    </item>
  </channel>
</rss>
