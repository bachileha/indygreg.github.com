<?xml version="1.0" encoding="UTF-8"?>
<feed
  xmlns="http://www.w3.org/2005/Atom"
  xmlns:thr="http://purl.org/syndication/thread/1.0"
  xml:lang="en"
   >
  <title type="text">Gregory Szorc'c Digital Home</title>
  <subtitle type="text">Rambling on</subtitle>

  <updated>2012-09-27T00:30:49Z</updated>
  <generator uri="http://blogofile.com/">Blogofile</generator>

  <link rel="alternate" type="text/html" href="http://gregoryszorc.com/blog" />
  <id>http://gregoryszorc.com/blog/feed/atom/</id>
  <link rel="self" type="application/atom+xml" href="http://gregoryszorc.com/blog/feed/atom/" />
  <entry>
    <author>
      <name></name>
      <uri>http://gregoryszorc.com/blog</uri>
    </author>
    <title type="html"><![CDATA[Mach Has Landed]]></title>
    <link rel="alternate" type="text/html" href="http://gregoryszorc.com/blog/2012/09/26/mach-has-landed" />
    <id>http://gregoryszorc.com/blog/2012/09/26/mach-has-landed</id>
    <updated>2012-09-26T17:30:00Z</updated>
    <published>2012-09-26T17:30:00Z</published>
    <category scheme="http://gregoryszorc.com/blog" term="Mozilla" />
    <category scheme="http://gregoryszorc.com/blog" term="Firefox" />
    <summary type="html"><![CDATA[Mach Has Landed]]></summary>
    <content type="html" xml:base="http://gregoryszorc.com/blog/2012/09/26/mach-has-landed"><![CDATA[<p>Hacking on Firefox is <em>hard</em>. Compiling the source tree for the first
time is a daunting experience. If you manage to do that, you still need
to figure out how to submit patches, write and run tests, etc. There is
no shortage of points where people can get confused, make mistakes, or
just give up because the barrier is too high.</p>
<p>I have strong convictions about making the overall developer experience
better (developers are users too, after all). The easier you make the
developer experience, the greater the chances of retaining developers.
And retaining developers means more contributions: more features and
fewer bugs. This translates to a better state for the Mozilla Project.
This makes the world a better place.</p>
<p>Since practically my first day working at Mozilla, I've been
experimenting with ways to make contributing to Firefox easier by
improving the build system or interaction with it.</p>
<p>With a lot of help, I've finally succeeded in landing something into the
Firefox source tree that I think will ultimately lead to a much better
developer experience.</p>
<p>It's called <strong>mach</strong> (German for <em>do</em>) and if you pull the latest
version of <a href="https://hg.mozilla.org/mozilla-central">mozilla-central</a>
(Firefox's main source code repository), you can run mach today.</p>
<h2>Running Mach</h2>
<p>You can run Mach by simply executing it from the root directory in the
repository:</p>
<pre><code>$ ./mach
</code></pre>
<p>Ideally, I shouldn't have to tell you anything else: mach's output
should provide you all the instruction you need to use it. If it
doesn't, that is a bug and it should be fixed.</p>
<p>Realistically, mach is still in early development and its user
experience still leaves a lot to be desired.</p>
<p>Because technical usage docs belong in a medium that is easily
discoverable and where the community can improve on them (not a
post on a personal blog), you can find additional usage information in
the
<a href="https://developer.mozilla.org/En/Developer_Guide/mach">mach article</a> on
MDN. The
<a href="https://hg.mozilla.org/mozilla-central/file/default/python/mach/README.rst">mach README</a>
holds more technical information for people wanting to poke at the inner
workings.</p>
<p>Mach does require Python 2.7. The build system will likely soon require
Python 2.7 as well. So, if you don't have Python 2.7, you should upgrade
now before you lose the ability to build the tree. Conveniently, the
tree now has a
<a href="http://gregoryszorc.com/blog/2012/09/18/bootstrap-your-system-to-build-firefox">bootstrap script</a>
which covers the installation of Python. So, Python 2.7 should just be a
simple command away.</p>
<h2>Features</h2>
<p>Why would you use mach? Good question! Compared to the existing
out-of-the-box experience, mach adds:</p>
<ul>
<li>Ability to run xpcshell and mochitest tests from the source directory.
  This means you can tab-complete test filenames in your shell and it
  <em>just works</em>.</li>
<li>Parsing of compiler warnings (currently supports Clang 3.1 and MSVC
  formats) into a unified warnings database (actually a JSON file).
  After builds you can run <em>./mach warnings-list</em> or <em>./mach
  warnings-summary</em> to get a concise list without having to look at
  build logs.</li>
<li>A single command-line interface where you can easily discover new
  functionality. Just run <em>./mach help</em> (try doing that with make!).</li>
</ul>
<p>Naysayers will say this is a paltry list. They are correct. I have
bigger plans. But, you have to start somewhere.</p>
<h2>Goals and Future Ideas</h2>
<p>The overall goal of mach is to improve the developer experience of
developing Firefox and other Gecko applications. It does this by
providing a convenient, central command in the root directory of
the repository that acts as both an oracle to discover new commands
and functionality (<em>./mach help</em>) as well as a proxy to execute them.
You don't need to worry about environment variables, working directories,
or finding some random script hidden in the bowells of the source tree.
You just run a single command and the world is brought to you. No build
documentation. No outdated wikis. No copying commands into your shell.
No having to scour random blogs for useful tools. You just clone the
repository, run a command, see what you can do, and get stuff done. Your
shell-literate grandmother could do it.</p>
<p>Mach should be your springboard to in-tree developer tools and increased
productivity. You shouldn't need anything except a copy of the source
tree and mach.</p>
<p>Like Git and Mercurial, mach is powered by the concept of
sub-commands/actions. So, one simply needs to register a new sub-command
with the mach driver. This involves writing a Python class. Once you do
that, people can discover and use that functionality. All batteries are
included with a copy of mozilla-central.</p>
<p>As stated above, the current set of commands is rather small. But, the
sky is the limit. Here are some of my ideas:</p>
<ul>
<li>Ability to upload, download, and apply patches from Bugzilla (Burak
  YiÄŸit Kaya, Jeff Hammel, Clint Talbert and I have already talked about
  this -- progress tracked in
  <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=774141">bug 774141</a>).</li>
<li>Automatically configure Mercurial with optimal settings (ensure user
  info is set, proper lines of diff context, enable mqext, etc). Tracked
  <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=794580">bug 794580</a>.</li>
<li>Submit Try builds. The <a href="https://github.com/pbiggar/trychooser">trychooser</a>
  Mercurial extension could easily live as a mach subcommand! Tracked in
  <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=774137">bug 774137</a>.</li>
<li>Identify Bugzilla components and/or reviewers from files touched by
  patch. It's all in the history of the touched files and the history of
  the old bugs referenced by those commits!
  <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=774145">Bug 774145</a>.</li>
<li>Interaction with the <em>self-serve</em> build API. That thing on TBPL to
  control individual builds - we could make a CLI interface for it.
  (Steve Fink and/or Jeff Hammel already have
  <a href="https://hg.mozilla.org/users/josh_joshmatthews.net/self-serve-tools">code</a>
  for this - it just needs to be integrated).
  <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=774147">Bug 774147</a>.</li>
</ul>
<p>If you have an idea for a feature, please
<a href="https://bugzilla.mozilla.org/enter_bug.cgi?product=Core&amp;component=mach">file a bug</a>.
Please note there are many features on file already. However, some
obvious ones such as integration with missing test suites have yet to be
filed (at least at the time I wrote this post).</p>
<p>If you wrote an awesome developer tool and would like others to use it
(without having to rely on people discovering it by reading a corner of the
Internet), add it to mach! Use mach as a wedge to get more exposure and
users. File a bug. I will happily r+ patches that add useful developer
functionality to the tree.</p>
<h2>What this Means / Longer Term Future</h2>
<p>While there is no timetable, mach will eventually replace <em>client.mk</em>.
client.mk, like mach, is essentially a CLI driver for the build
system. Having the driver implemented in Python rather than make has many
compelling advantages. I could probably write a whole post on it, but
I'll spare the world from my ranting.</p>
<p>Anyway, this all means that you may want to start re-training your
muscle memory now. Stop typing <em>make</em> and start typing <em>mach</em>. If you
need to type <em>make</em> because mach does not provide a feature, this is a
missing feature from mach.
<a href="https://bugzilla.mozilla.org/enter_bug.cgi?product=Core&amp;component=mach">File a bug</a>
and request a new mach feature!</p>
<p>I want to condition people to stop typing <em>make</em>, especially in the object
directory. There are drastic changes to the build system in the works
(<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=784841">bug 784841</a> is
the tip of the iceburg). These changes will require the build system to
be treated as a black box. So, things like invoking make from the object
directory will eventually break. You'll need to go through an
intelligent tool to invoke the build system. Mach will be that tool.</p>
<h2>Thanks</h2>
<p>I would like to single out the following individuals for helping to land
mach:</p>
<ul>
<li>Jeff Hammel for doing the bulk of the reviewing. He shares my vision
  for mach and how it will make the overall developer experience much
  more pleasant and how this will translate to better things for The
  Project. In my mind, Jeff deserves as much credit for landing mach as
  I do.</li>
<li>Mike Hommey and Ms2ger for review help. Mike Hommey helped identify a
  lot of issues with build system integration. Ms2ger provided lots of
  general feedback on Python issues and API design.</li>
<li>Mike Connor (my manager) for allowing me to work on this. It's not
  related to my job description in any way so he <em>could</em> say I shouldn't
  be spending time on this. But, he realizes the positive impact this can
  have and has been supportive of it.</li>
</ul>
<p>I hope you find mach useful!</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://gregoryszorc.com/blog</uri>
    </author>
    <title type="html"><![CDATA[Bootstrap Your System to Build Firefox]]></title>
    <link rel="alternate" type="text/html" href="http://gregoryszorc.com/blog/2012/09/18/bootstrap-your-system-to-build-firefox" />
    <id>http://gregoryszorc.com/blog/2012/09/18/bootstrap-your-system-to-build-firefox</id>
    <updated>2012-09-18T17:00:00Z</updated>
    <published>2012-09-18T17:00:00Z</published>
    <category scheme="http://gregoryszorc.com/blog" term="Mozilla" />
    <category scheme="http://gregoryszorc.com/blog" term="Firefox" />
    <summary type="html"><![CDATA[Bootstrap Your System to Build Firefox]]></summary>
    <content type="html" xml:base="http://gregoryszorc.com/blog/2012/09/18/bootstrap-your-system-to-build-firefox"><![CDATA[<p>If you've looked at the
<a href="https://developer.mozilla.org/en-US/docs/Simple_Firefox_build">build instructions</a>
for Firefox lately, you may have noticed something new: support for
system bootstrapping!</p>
<p>Now checked in to mozilla-central is a
<a href="https://hg.mozilla.org/mozilla-central/file/default/python/mozboot/">framework</a>
for ensuring your system is capable of building mozilla-central and
Firefox. You just need to download and run a single Python script and it
performs magic.</p>
<p>Kudos go out to a community contributor, kmm (name wasn't revealed) for
doing the legwork for tracking down and verifying things worked on all
the Linux distros. Richard Newman and Jeff Hammel also helped with code
reviews. Just hours after it landed, Landry Breuil contributed support
for OpenBSD!</p>
<p>Currently, bootstrapping works for the following:</p>
<ul>
<li>Ubuntu Linux</li>
<li>Mint</li>
<li>CentOS 6.x</li>
<li>Fedora</li>
<li>OS X 10.6, 10.7, and 10.8</li>
<li>OpenBSD</li>
</ul>
<p>If you want to add support for an additional OS, please file a
<a href="https://bugzilla.mozilla.org/enter_bug.cgi?product=Core&amp;component=Build%20Config">Core : Build Config</a>
bug. Likewise, if you encounter an issue, please file a bug so others
don't get tripped up by it!</p>
<p>Bootstrap support is definitely in its infancy. It still needs features
like better prompting and opportunities for user choice (e.g. support
MacPorts on OS X - currently it only works with Homebrew). But, I think
it is much better than what existed previously, especially on OS X.</p>
<p>I consider this bootstrapping component just one piece in a larger
mission to make developing and building Firefox (and other Gecko
applications) easier. This should (hopefully) lead to more development
involvement. The next component to land will likely be
<a href="http://gregoryszorc.com/blog/2012/07/25/mozilla-build-system-plan-of-attack">mach</a>.
It's (finally) been getting some review love (thanks Jeff Hammel!), so
I'm optimistic it will land in the next few weeks.</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://gregoryszorc.com/blog</uri>
    </author>
    <title type="html"><![CDATA[Visual Studio Project Generation for mozilla-central]]></title>
    <link rel="alternate" type="text/html" href="http://gregoryszorc.com/blog/2012/08/28/visual-studio-project-generation-for-mozilla-central" />
    <id>http://gregoryszorc.com/blog/2012/08/28/visual-studio-project-generation-for-mozilla-central</id>
    <updated>2012-08-28T12:00:00Z</updated>
    <published>2012-08-28T12:00:00Z</published>
    <category scheme="http://gregoryszorc.com/blog" term="Mozilla" />
    <category scheme="http://gregoryszorc.com/blog" term="Firefox" />
    <category scheme="http://gregoryszorc.com/blog" term="build system" />
    <summary type="html"><![CDATA[Visual Studio Project Generation for mozilla-central]]></summary>
    <content type="html" xml:base="http://gregoryszorc.com/blog/2012/08/28/visual-studio-project-generation-for-mozilla-central"><![CDATA[<p>I have very alpha support for Visual Studio project generation for
mozilla-central that daring people can dogfood.</p>
<p>I want to emphasize that this is extremely alpha. Normally, I wouldn't
release things as fragile as they are. But, I know Windows developers
sorely miss Visual Studio, especially IntelliSense. The current Visual
Studio projects support IntelliSense, so I want to get this in the hands
of Windows developers ASAP.</p>
<p>The current directions for making this all work are a bit hacky. Things
will change once things have matured. For now, please excuse the mess.</p>
<p>First, you will need to grab the code. If you use Git, set up a remote
to my repository:</p>
<pre><code>git remote add indygreg git://github.com/indygreg/mozilla-central.git
git fetch indygreg
</code></pre>
<p>The branch of interest is <em>build-splendid</em>. I periodically rebase this
branch on top of master. You have been warned.</p>
<p>You can switch to this branch:</p>
<pre><code>git checkout -b build-splendid indygreg/build-splendid
</code></pre>
<p>Alternatively, you can squash it down to a single commit and merge it
into your local branch. Once you've done that, you can record the SHA-1
of the commit and cherry-pick that wherever you like!</p>
<pre><code>git merge --squash indygreg/build-splendid
git commit
</code></pre>
<p>In the current state, you need to build the tree or the Visual Studio
projects will complain about missing files. It doesn't matter if you
build the tree before or after Visual Studio projects are generated.
But, we might as well get it out of the way. From your MozillaBuild
environment, run:</p>
<pre><code>./mach build
</code></pre>
<p>That should <em>just work</em>. If it doesn't, you may need to configure
mach.ini. See my <a href="http://gregoryszorc.com/blog/2012/08/15/build-firefox-faster-with-build-splendid/">previous post</a>
on how to configure mach.ini. As a reference, my Windows config is:</p>
<pre><code>[build]

configure_extra = --disable-webgl

[compiler]

[paths]
source_directory = c:\dev\src\mozilla-central-git
object_directory = c:\dev\src\mozilla-central-git\objdir
</code></pre>
<p>Now, to generate Visual Studio project files:</p>
<pre><code>./mach backendconfig visualstudio
</code></pre>
<p>That should take about a minute to finish. When it's done, it should
have created <em>objdir/msvc/mozilla.sln</em>. You should be able to load that
in Visual Studio!</p>
<p>You will need to regenerate Visual Studio project files when the build
config changes. As a rule of thumb, do this every time you pull source.
You don't need to perform a full build before you generate Visual Studio
files (you do need to perform configure, however). However, if you have
not performed a full build, Visual Studio may not be able to find some
files, like headers generated from IDLs.</p>
<p><strong>Please close the solution before regenerating the project files.</strong> If
you don't, Visual Studio puts up a modal dialog for each project file
that changed and you have to click through over a hundred of these. It's
extremely frustrating. I'm investigating workarounds.</p>
<h2>Current State</h2>
<p>Currently, it only generates projects for C/C++ compilation (libraries).
I still need to add support for IDL, headers, etc. However, each
project has proper compiler flags, header search paths, etc. So,
IntelliSense is happy and some things do manage to compile!</p>
<p>Many parts are broken and sub-par.</p>
<p>I've only tested on Visual Studio 2008. If you are running Visual Studio
\2010, you can try to upgrade the solution. This <em>may</em> work. The backend
supports generating solutions for different versions. But, I haven't
tested things work on non-2008 and I don't want to expose untested behavior.</p>
<p>Compiling within Visual Studio works for some things. On my system, I
get a lot of <em>nullptr not defined</em> errors. I'm not sure why. This will
hopefully be worked out soon.</p>
<p>If you do manager to compile within Visual Studio, the output files
don't go in the right places. So, if you do a build from the
command-line, it will have to re-compile to pick up changes.</p>
<p>Project names are based on the name of the library they produce. I'm not
sure if this is the best solution.</p>
<p>Project dependencies are not set up. They will be added later.</p>
<p>Projects for linking libxul or building firefox.exe are not yet
provided. Along the same vein, debugging support is not built-in. I'm
working on it.</p>
<p>Basically, IntelliSense works. You can now use Visual Studio as a rich
editor. Hopefully this is a step in the right direction.</p>
<p>I'm anxious to hear if this works for other people. Please leave
comments!</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://gregoryszorc.com/blog</uri>
    </author>
    <title type="html"><![CDATA[Build Firefox Faster with Build Splendid]]></title>
    <link rel="alternate" type="text/html" href="http://gregoryszorc.com/blog/2012/08/15/build-firefox-faster-with-build-splendid" />
    <id>http://gregoryszorc.com/blog/2012/08/15/build-firefox-faster-with-build-splendid</id>
    <updated>2012-08-15T14:30:00Z</updated>
    <published>2012-08-15T14:30:00Z</published>
    <category scheme="http://gregoryszorc.com/blog" term="Mozilla" />
    <category scheme="http://gregoryszorc.com/blog" term="Firefox" />
    <category scheme="http://gregoryszorc.com/blog" term="build system" />
    <summary type="html"><![CDATA[Build Firefox Faster with Build Splendid]]></summary>
    <content type="html" xml:base="http://gregoryszorc.com/blog/2012/08/15/build-firefox-faster-with-build-splendid"><![CDATA[<p>Would you like to build Firefox faster? If so, do the following:</p>
<pre><code>hg qimport http://people.mozilla.org/~gszorc/build-splendid.patch
hg qpush
rm .mozconfig* (you may want to create a backup first)
./mach build
</code></pre>
<p>This should <em>just work</em> on OS X, Linux, and other Unix-style systems.
<strong>Windows support is currently broken, sorry.</strong></p>
<p><em>mach</em> can do much more than build. Run the following to see what:</p>
<pre><code>./mach --help
</code></pre>
<h2>Important Info</h2>
<p><em>mach</em> replaces client.mk. <em>mach</em> has its own configuration file. The
first time you run <em>mach</em>, it will create the file <em>mach.ini</em> in the
same directory as the <em>mach</em> script. This is your new <em>mozconfig</em> file.</p>
<p>The default <em>mach.ini</em> places the object directory into the directory
<em>objdir</em> under the top source directory. It also builds an optimized
binary without debug info.</p>
<p>Run the following to see which config settings you can add to
<em>mach.ini</em>:</p>
<pre><code>./mach settings-create
./mach settings-list
</code></pre>
<p>This <em>may</em> fail because I'm still working out the kinks with <em>gettext</em>.
If it doesn't work, open <em>python/mozbuild-bs/mozbuild/base.py</em> and search
for <em>_register_settings</em>. Open
<em>python/mozbuild-bs/mozbuild/locale/en-US/LC_MESSAGES/mozbuild.po</em> for
the help messages.</p>
<p>As a point of reference, my <em>mach.ini</em> looks like the following:</p>
<pre><code>[build]
application = browser

configure_extra = --enable-dtrace --enable-tests

[compiler]
cc = /usr/local/llvm/bin/clang
cxx = /usr/local/llvm/bin/clang++

cflags = -fcolor-diagnostics
cxxflags = -fcolor-diagnostics

[paths]
source_directory = /Users/gps/src/mozilla-central-git
object_directory = /Users/gps/src/mozilla-central-git/objdir
</code></pre>
<p>I am on OS X and am using a locally-built version of LLVM/Clang, which I
have installed to <em>/usr/local/llvm</em>.</p>
<p>You'll notice there are no options to configure make. The patch
automatically selects optimal settings for your platform!</p>
<h2>Known Issues and Caveats</h2>
<p>This is alpha. It works in scenarios in which I have tested it, mainly
building the <em>browser</em> application on OS X and Linux. There are many
features missing and likely many bugs.</p>
<p>I have been using this as part of my day-to-day development for weeks.
However, your mileage may vary.</p>
<p>As stated above, Windows support is lacking. It will appear to work, but
things will blow up during building. Don't even try to use it on
Windows.</p>
<p>There are likely many bugs. Please don't file Bugzilla bugs, as this
isn't part of the build system just yet.</p>
<p><strong>This patch takes over the build system. Do not attempt to use
client.mk or run make directly with this patch applied.</strong></p>
<p>If you encounter an issue, your methods of recourse are:</p>
<ol>
<li>Post a comment on this blog post</li>
<li>Ping me on irc.mozilla.org. My nick is <em>gps</em>. Try the #buildfaster
   channel.</li>
<li>Send an email to gps@mozilla.com</li>
</ol>
<p>I am particularly interested in exceptions and build failures.</p>
<p>If you encounter an issue building with this, just reverse the patch and
build like you have always done (don't forget to restore your mozconfig
file).</p>
<p>If <em>mach.ini</em> does not support everything you were doing in your
mozconfig, please send me a copy of your mozconfig so I can implement
whatever you need.</p>
<h2>Other Info</h2>
<p>I will likely write a follow-up post detailing what's going on. If you
are curious, the code lives in <em>python/mozbuild-bs</em>. The <em>backend</em> and
<em>frontend</em> sub-packages are where the magic is at. Once the backend has
been configured, check out <em>hybridmake.mk</em> and all of the <em>splendid.mk</em>
files in the object directory.</p>
<p>I am particularly interested in the real-world impact of this patch on
people's build times. In this early version of the patch, you likely
won't see drastic speed increases. On my MacBook Pro with an SSD, I see
end-to-end clobber build times decrease by over a minute. With a little
more work, I should be able to shave another minute or two off of that.</p>
<p>I will try to keep the patch up-to-date as I improve the build system.
Refresh early and often.</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://gregoryszorc.com/blog</uri>
    </author>
    <title type="html"><![CDATA[One Year at Mozilla]]></title>
    <link rel="alternate" type="text/html" href="http://gregoryszorc.com/blog/2012/07/18/one-year-at-mozilla" />
    <id>http://gregoryszorc.com/blog/2012/07/18/one-year-at-mozilla</id>
    <updated>2012-07-18T00:00:00Z</updated>
    <published>2012-07-18T00:00:00Z</published>
    <category scheme="http://gregoryszorc.com/blog" term="Mozilla" />
    <category scheme="http://gregoryszorc.com/blog" term="Firefox" />
    <category scheme="http://gregoryszorc.com/blog" term="Sync" />
    <summary type="html"><![CDATA[One Year at Mozilla]]></summary>
    <content type="html" xml:base="http://gregoryszorc.com/blog/2012/07/18/one-year-at-mozilla"><![CDATA[<p>It is hard to believe that my first day as a full-time employee of Mozilla
was one year ago today! But, here I am. And, I'd like to think the past
year is worth reflecting on.</p>
<p>So, what have I been doing for a year? Good question!</p>
<h2>Accomplishments</h2>
<ul>
<li>First patch and commit to Firefox: <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=673209">bug 673209</a>.
  Yes, my first patch was to configure.in. It scared me too.</li>
<li>Number of non-merge commits: 133</li>
<li>Number of merge commits: 49</li>
<li>Number of reviews: 31</li>
<li>Favorite commit message: <a href="https://hg.mozilla.org/mozilla-central/rev/88d02a07d390">88d02a07d390</a>
  <em>Fix bug 725478 because we run a buggy Python released almost 5 years
  ago; r=tigerblood</em> (it was a bustage follow-up).</li>
<li>Biggest mistake: buildbotcustom change to packaging turned every tree
  red. All of them. Including release. I think I have philor on record
  saying it is the worst burnage he's ever seen. Mission accomplished!</li>
</ul>
<p>Major User-Facing Features:</p>
<ul>
<li>Wrote add-on sync for Firefox (with help from many others, especially
  Dave Townsend and Blair McBride).</li>
<li>Principle reviewer for Apps in the Cloud (apps sync) in Firefox. (Are
  reviewers allowed to take credit?)</li>
</ul>
<p>Honestly, when I see that list, I think <em>that's all?</em> It doesn't feel
like a lot, especially since I work on a major user-facing feature
(Firefox Sync). I do contribute to more. But, if you ask me what the
most significant impact was, I don't think I can call anything else out
as <em>major</em>.</p>
<p>There are certainly a lot of minor things:</p>
<ul>
<li>Actually managed to understand how Firefox Sync works, including the
  crypto model. I even <a href="http://docs.services.mozilla.com/sync/storageformat5.html">documented</a>
  it! I don't think I knew any of that when I started (I basically knew
  that Firefox Sync was using strong client-side encryption. What that
  meant, I had no clue.)</li>
<li>Filed initial bugs (including some patches) to compile mozilla-central
  on Windows 8 and MSVC 2011. By the time people started working on
  Metro development, mozilla-build, configure, and the like already
  supported building.</li>
<li>Configured <a href="https://ci.mozilla.org/job/sync-android/">Android Sync Jenkins Builder</a>.
  I'm told the Android Sync team loves it! You gotta love all the
  built-in dashboards. I really wish we had this for mozilla-central.</li>
<li>Made xpcshell test harness write xUnit files. Machine readable output
  of test results, baby!</li>
<li>Implement <em>send tab to device</em> API in Firefox Sync. Too bad we don't
  have UX to use it :(</li>
<li>Implemented testing-only JavaScript modules. So, instead of the hack
  that is [head] files in tests, you can
  <em>Cu.import("resource://testing-common/foo.js");</em></li>
<li>Made test package generation quieter. This made build logs about 30%
  smaller. This means you can get at build results faster.</li>
<li>Hacked around with JavaScript code coverage using the JS Debugger API.
  Failed in the process. But, I learned a lot about the JS Debugger API,
  so I consider it a win.</li>
<li>Rewrote Firefox Sync's record reconciling algorithm. The old one was
  full of subtle data loss corner cases. The new algorithm is much more
  robust (we think - even with 3 reviewers there was still some head
  scratching).</li>
<li>Emancipated lots of generic JavaScript code from the Sync tree into
  the a <em>services-common</em> package. This anticipated Apps in the Cloud
  and notifications' requirement to use this functionality and allowed
  those projects to get going quicker. At this point, we're effectively
  running a mini Toolkit. We really need to port some of this
  <em>upstream</em>.</li>
<li>Helped design the <a href="http://docs.services.mozilla.com/storage/apis-2.0.html">next version</a>
  of the HTTP service to be used by Sync.</li>
<li>Implemented a standalone JavaScript implementation of the above. The
  production server used by Mozilla runs on Python (running the Python
  server in Mozilla's test environment would be too difficult). The
  server was also implemented using just the spec. This allowed us to
  clarify many parts of the spec. The Python functional tests can also
  be executed against the JS server. This gives us confidence that
  functionality is equivalent and tests hitting the test/JS server will
  behave the same as if they are hitting the production Python server.</li>
<li>Implemented a standalone JavaScript
  <a href="https://hg.mozilla.org/mozilla-central/file/default/services/common/storageservice.js">client</a>  for the above service. Previously, all the logic for this was scattered
  over about a dozen files and was notoriously difficult to audit and
  update. I also think it is a decent example of good code.  Clean.
  Highly documented. No hacks.</li>
<li>Reviewed a skeleton for the notifications service, which will
  eventually power browser notifications in Firefox.</li>
<li>Build system patches to better support Clang. Thankfully, Rafael
  EspÃ­ndola has been our Clang champion as of late and is now ensuring
  the bleeding edge of Clang does not break the tree. Thanks, Rafael! (I
  actually think he is in the process of switching our OS X builds to
  use Clang as I type this!)</li>
<li>Worked with security and crypto people to devise the security model
  behind the next version of Firefox Sync. (Brian Warner and Ben Adida
  have been doing most of the crypto work. I'm mostly on the sidelines
  making sure they design a system that can easily interop with Sync.)</li>
<li>Helped devise the <a href="http://docs.services.mozilla.com/sync/storageformat6.html">next version</a>
  of Sync's server-side storage format. This will make the next version
  of Sync faster and able to hold more data at lower server cost.</li>
<li>Gave lots of love to documentation at
  <a href="http://docs.services.mozilla.com/">https://docs.services.mozilla.com/</a>
  (especially the Sync docs). It's almost at the point where others can
  implement Sync clients without having to ask one of the fewer than 10
  people on the planet who actually know.</li>
<li>Contributed many small patches to the build system. Mostly general
  cleanup so far. Although, I have much bigger plans in the works.</li>
<li>Many miscellaneous small things. (I get distracted easily.)</li>
</ul>
<p>Well, that list doesn't seem too shabby. But, a lot of it is smaller
ticket items. I don't think there's anything there worth writing home
about.  Whatever. The future is looking bright for Firefox Sync (Persona
integration will make Sync usable by millions more) and new sync
backends are coming (including search engine sync). So, I'm fine with
not having a longer list of big ticket contributions after only a year.</p>
<h2>On Ramping up at Mozilla</h2>
<p>I will be the first to admit that I had a difficult time getting into
the groove at Mozilla and my first months (dare I say my first half
year) were unproductive by my personal standards.</p>
<p>I can't say I wasn't warned. My manager (Mike Connor) told me
multiple times that it would happen. I was skeptical, insteading
rationalizing that my previous track record of learnly quickly
would hold. He was right. I was wrong. I got fat from the humble pie.</p>
<p>There are a few reasons for this. For starters, I was starting a new
job. It's almost impossible achieve 100% productivity on your first day.
Second, I was working with tools I knew little about, including
JavaScript and especially including the flavor of JavaScript used
inside Firefox. (Short version: the JavaScript within Firefox is awesome
in that it implements bleeding-edge features of the language.
Unfortunately, the JavaScript inside Firefox/Gecko is contaminated
by this blight called XPCOM. It makes things ugly and not very
JavaScript-y. XPCOM also makes the learning curve that much harder
because now you have to learn multiple technologies at the same time.)
It was daunting.</p>
<p>Not helping matters was the fact that Firefox Sync is complicated.
Syncing data is in of itself a difficult problem. Throw in remote
servers, an HTTP protocol, a encryption, and interaction with systems
inside Firefox that are themselves complicated, and you have a <strong>hard</strong>
problem. My first months were literally spent being a thorn in Philipp
von Wieter^H^H^H^H^H^H philikon's side, barraging him with an endless
stream of questions. I am forever in beer debt to him because of this.
When Philipp left the team to work on Boot 2 Gecko and the rest of the
Firefox Sync team was retasked to work on Android Sync shortly
thereafter, I was on my own little island to manage Firefox Sync.
I kind of felt like Tom Hanks' character in <em>Castaway</em>.</p>
<p>If I have one piece of advice for people starting at Mozilla it's this:
be prepared to be humbled by your own ignorance. There is a lot to
learn. It's not easy. Don't feel bad when you struggle. The payoff is
worth it.</p>
<h2>On Life at Mozilla</h2>
<p>Despite the hurdles I initially faced ramping up at Mozilla, life at
Mozilla is great. This mostly stems from the people, of course.</p>
<p>If you are just looking for technical excellence, I think Mozilla has
one of the highest concentrations of any company in the world. Sure,
larger companies will have <em>more</em> amazing individuals. But, the number
per capita at Mozilla is just staggering. I don't know how many times
I've met or talked with someone only to find out later they are
considered to be one of the best in his or her respective field. Reading
Mozilla's phonebook is like looking at a <em>Who's Who</em> list. For someone
like me who loves being a sponge for knowledge, Mozilla is an environment
in which I can thrive. Just thinking back at everything I've learned in
the past year makes my mind asplode.</p>
<p>On the personal front, the personalities of Mozillians are also top
notch. People are generally helpful and supportive. (They need to be for
an open source project to thrive.) People recognize good ideas when they
hear them and there is comparatively few political battles to be won
when enacting change. People themselves are generally interesting and
passionate about the world and the work they do. If you are living
inside the Mozilla bubble, you may not realize how lucky you have it.
I could give specific examples, but I'd be writing all night. Just
take my word for it.</p>
<p>If you need something to whet your appetite, just check out the
zaniness that is <a href="http://mozillamemes.tumblr.com/">Mozilla Memes</a>.
I don't expect you to understand many of the posts unless you are a
Mozillian or follower of Reddit and know what internet memes are. But, if
you are either, it pretty much sums up a large part of the culture for
you. Sometimes I feel like I'm living in one giant, happy meme.</p>
<p>One of the aspects I love most about working at Mozilla is I finally
feel that my career interests are aligned with an organization I
philosophically agree with. Just read the
<a href="https://www.mozilla.org/about/manifesto.html">Mozilla Manifesto</a>. What's
not to like?</p>
<p>This is one of the primary factors that convinced me to join Mozilla.
After Microsoft acquired the startup where I had my first post-college
job (Tellme Networks), I could never hold my head high in Silicon Valley
among my friends in the tech sector. <em>Normal</em> people and those outside
of Silicon Valley were like, "Microsoft, cool!" But, something just
didn't feel right about saying I worked for them. I felt like I was working
for the Empire while I really wanted to be working for the Rebel Alliance.
I felt like I had to atone for my time at Microsoft. I felt like I needed
to cleanse my soul. Mozilla was an obvious answer.</p>
<p>(I don't mean to disparage Microsoft. I actually think the culture has
changed since the days when their behavior earned them the reputation
that Silicon Valley stills holds them accountable for. Still, I would
not work for them in Silicon Valley. Anyway, I'm not here to talk about
the past.)</p>
<p>Mozilla is an organization I'm proud to work for. I exercise that pride
by frequently wearing my awesome Firefox hoodie. Nearly every time I do,
random people come up to me and say how they love Firefox and/or what
Mozilla does for the world. Every time they do, it brings a smile to my
face. This constantly reinforces what I know to be true: that I'm
working for a great organization.</p>
<h2>Future at Mozilla</h2>
<p>I'm already looking forward to the next year at Mozilla. It is already
shaping up to be much, much more productive than my first.</p>
<p>On the roadmap, all of my hacking about with the build system is about
to pay dividends. Ever since my first day at Mozilla I have been
frustrated with the build system and the developer experience one must
go through to contribute to Firefox. After many months of casual (mostly
evenings and weekends) experimentation, my work is about to pay off.</p>
<p>I have successfully formulated a <a href="http://gregoryszorc.com/blog/2012/06/25/improving-mozilla%27s-build-system/">plan of attack</a>
and helped convince others this is what we need to do. We have since
<a href="http://coop.deadsquid.com/2012/07/reviving-buildfaster-plan-of-attack/">committed</a>
to the fundamental components of that plan and are
<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=774049">tracking</a> its
progress. (I don't mean to take sole or even primary responsibility for
this as the credit resides with a number of people. But, I would like to
think that the dozens of times I championed aspects of this plan in IRC
and in hallway chats before I was the first person to articulate it in a
post helped lay the groundwork for the eventual acceptance of this
project.) Once we see progress on this project, great things will come
from it. I promise.</p>
<p>My work towards making the build system faster had an unintended
consequence: the creation of a new tool that serves as a frontend to the
build system. One day, I took a step backwards and realized that the
potential for such a tool is much greater than simply interacting with
the build system. So, I extracted that work from my build system
hacking and polished it up a bit. It is now
<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=751795">one review away</a>
from landing. When it does, thousands of Firefox developers will have a
much better experience when developing Firefox. And, my hope is for
<a href="https://bugzilla.mozilla.org/showdependencytree.cgi?id=774108">many more features</a>
to follow to make it even more awesome, especially for first-time
contributors. I believe this is important to help advance Mozilla's
Mission.</p>
<p>Improving the developer experience of Firefox is exciting and it will
likely make a lot of people really happy. But, it's neither the most
exciting nor most important project I'll contribute to in the upcoming
year. The most exciting and important project for me will be
refactoring Firefox Sync to make it faster, more robust, sync more data,
and, most importantly, usable by more people.</p>
<p>Firefox Sync stands out from similar products in that it keeps your data
safe. Really safe. I
<a href="http://gregoryszorc.com/blog/2012/04/08/comparing-the-security-and-privacy-of-browser-syncing/">blogged</a>
about this previously. But, I intentionally kept the tone of that post
neutral and factual. The truth is that the security model of Firefox Sync
makes it look like nearly all other products aren't even trying. I take
immense pride in working on a data-sharing feature that makes users'
lives better <strong>without undermining security</strong>. Firefox Sync stands in
rare company in this regard.</p>
<p>Unfortunately, in our zeal for the best security possible, we designed a
product that isn't usable by the majority of people because it is too
complicated to set up and is prone to losing your data. In the end, this
doesn't really serve the overall Firefox user base.</p>
<p>We've been hard at work devising the next version of Firefox Sync which
will retain the optimum security and privacy settings of the existing
product while extending usability at nearly-comparable security and
ofer data recovery to the vast majority of our users. <strong>This is huge.</strong></p>
<p>Yeah, I'm pretty damn excited about my next year at Mozilla.</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://gregoryszorc.com/blog</uri>
    </author>
    <title type="html"><![CDATA[Smaller Firefox Build Logs]]></title>
    <link rel="alternate" type="text/html" href="http://gregoryszorc.com/blog/2012/05/23/smaller-firefox-build-logs" />
    <id>http://gregoryszorc.com/blog/2012/05/23/smaller-firefox-build-logs</id>
    <updated>2012-05-23T08:50:00Z</updated>
    <published>2012-05-23T08:50:00Z</published>
    <category scheme="http://gregoryszorc.com/blog" term="Mozilla" />
    <category scheme="http://gregoryszorc.com/blog" term="Firefox" />
    <summary type="html"><![CDATA[Smaller Firefox Build Logs]]></summary>
    <content type="html" xml:base="http://gregoryszorc.com/blog/2012/05/23/smaller-firefox-build-logs"><![CDATA[<p>The other day I looked at a full Firefox build log from TBPL and noticed
that ~84,000 of the ~170,000 lines in the log I looked at was output
from archive processes. We were printing thousands of lines showing the
files that were being added and extracted from the archives that contain
test files!</p>
<p>I thought this was wasteful, so I filed
<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=757397">bug 757397</a> and
coded up a patch. Ted agreed that these lines were rather worthless and
the patch has landed in mozilla-inbound.</p>
<p>The result of the patch is build logs are about half as big in terms of
lines. And, it appears at least 500kb is shaved off the compressed log
files as well.</p>
<p>The real world impact is you should be able to load build logs from
the server faster because they are smaller.</p>
<p>If you were parsing this data before and are impacted by this, please
leave a comment on the aforementioned bug and we'll go from there.</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://gregoryszorc.com/blog</uri>
    </author>
    <title type="html"><![CDATA[Better Sharing of Test Code in Mozilla Projects]]></title>
    <link rel="alternate" type="text/html" href="http://gregoryszorc.com/blog/2012/05/10/better-sharing-of-test-code-in-mozilla-projects" />
    <id>http://gregoryszorc.com/blog/2012/05/10/better-sharing-of-test-code-in-mozilla-projects</id>
    <updated>2012-05-10T10:35:00Z</updated>
    <published>2012-05-10T10:35:00Z</published>
    <category scheme="http://gregoryszorc.com/blog" term="Mozilla" />
    <category scheme="http://gregoryszorc.com/blog" term="Firefox" />
    <category scheme="http://gregoryszorc.com/blog" term="testing" />
    <summary type="html"><![CDATA[Better Sharing of Test Code in Mozilla Projects]]></summary>
    <content type="html" xml:base="http://gregoryszorc.com/blog/2012/05/10/better-sharing-of-test-code-in-mozilla-projects"><![CDATA[<p>Just <a href="https://tbpl.mozilla.org/?tree=Mozilla-Inbound&amp;rev=b063ba6dd084">landed</a>
in mozilla-inbound (Firefox's integration tree) is
support for test-only JavaScript modules. That is, JavaScript modules
that are utilized by just test code. This is being tracked in
<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=748490">bug 748490</a>.</p>
<p>The use case for this feature is sharing common test code, mock types,
etc between tests. For example, in the Services code, we have a number
of mock types (like a JS implementation of the Sync HTTP server) that
need to be utilized across sub-modules. With test-only modules, it is
now possible to publish these modules to a common location and import
them using the familiar Cu.import() syntax. Previously, you had to
perform the equivalent of a <em>#include</em> (possibly by utilizing the
<em>[head]</em> section of xpcshell.ini files). The previous method of
importing is dirty because you pollute the global object. Furthermore,
it is really inconvenient when you wish to utilize shared files from
different directories. See
<a href="https://hg.mozilla.org/mozilla-central/file/f80568dba010/services/sync/tests/unit/xpcshell.ini#l2">this file</a>
for an example.</p>
<p>The new method of publishing and consuming test-only JavaScript modules
is clean and simple. From your Makefile, define <strong>TESTING_JS_MODULES</strong> to
a list of (JavaScript) files to publish. Optionally, define
<strong>TESTING_JS_MODULE_DIR</strong> to the relative path they should be published
to. If the directory variable is not defined, they will be published to
the root directory. Here is an example Makefile.in:</p>
<pre><code>DEPTH     = ../..
topsrcdir = @top_srcdir@
srcdir    = @srcdir@

include $(DEPTH)/config/autoconf.mk

TESTING_JS_MODULES = mockserver.js common.js
TESTING_JS_MODULE_DIR = foobar
</code></pre>
<p>All test modules are installed to a common directory somewhere in the
object directory. Where is not relevant. Just know it is outside the
normal distribution directory, so the test modules aren't packaged. This
common directory is registered with the resource manager under
<em>resource://testing/</em>. So, once a build is performed, you can import these
files via Components.utils.import():</p>
<pre><code>Cu.import("resource://testing-common/foobar/mockserver.js");
</code></pre>
<p>I hope this feature facilitates better reuse of test code. So, next time
you are writing test code, please consider writing writing and publishing it
as a module so others can utilize it.</p>
<p>One more thing. Currently, integration with the resource manager is only
implemented for xpcshell tests. I'd like to see this supported in all
the test runners eventually. I implemented xpcshell support because a)
that is the test harness I use almost exclusively and b) it is the only
one I'm comfortable modifying. If you want to implement support in
another test runner, please have a go at it!</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://gregoryszorc.com/blog</uri>
    </author>
    <title type="html"><![CDATA[Improving the Mozilla Build System Experience]]></title>
    <link rel="alternate" type="text/html" href="http://gregoryszorc.com/blog/2012/05/07/improving-the-mozilla-build-system-experience" />
    <id>http://gregoryszorc.com/blog/2012/05/07/improving-the-mozilla-build-system-experience</id>
    <updated>2012-05-07T16:45:00Z</updated>
    <published>2012-05-07T16:45:00Z</published>
    <category scheme="http://gregoryszorc.com/blog" term="Mozilla" />
    <category scheme="http://gregoryszorc.com/blog" term="Firefox" />
    <summary type="html"><![CDATA[Improving the Mozilla Build System Experience]]></summary>
    <content type="html" xml:base="http://gregoryszorc.com/blog/2012/05/07/improving-the-mozilla-build-system-experience"><![CDATA[<p><em>tl;dr User experience matters and developers are people too. I
have proposed a tool to help developers interact with the Firefox build
system and source tree.</em></p>
<p>I don't think I have to make my case when I state that Mozilla's build
system end-user experience is lacking. There are lots of hurdles to overcome:</p>
<ul>
<li>Determine where to obtain the source code.</li>
<li>Install a source control system (possibly).</li>
<li>Wait a <em>long</em> time for the large source repository to download.</li>
<li>Figure out how to launch the build process (unlike many other build
  systems, it isn't as simple as <code>configure</code> or <code>make</code> - although it is
  close).</li>
<li>Determine which dependencies need to be installed and install them
  (this can also take a long time).</li>
<li>Create a configuration file (mozconfig).</li>
<li>Build the tree (another long process).</li>
</ul>
<p>If you want to contribute patches, there are additional steps:</p>
<ul>
<li>Configure Mercurial with your personal info.</li>
<li>Configure Mercurial to generate patches in proper format.</li>
<li>Create a Bugzilla account (made simpler through Persona!).</li>
<li>Figure out the proper Bugzilla product/component (even I still
  struggle at this) so you can file a bug.</li>
<li>Figure out how to attach a patch to a bug and request review (it isn't
  intuitive if you've never used Bugzilla before).</li>
<li>Figure out who should review patch.</li>
<li>Learn how tests work so you can:</li>
<li>Write new tests.</li>
<li>Run existing tests to verify your changes.</li>
<li>Obtain commit access (so at least you can push to Try).</li>
<li>Learn how to push to Try.</li>
<li>Learn about <a href="https://tbpl.mozilla.org/">TBPL</a>.</li>
<li>Discover and use some of the amazing tools to help you
  (<a href="https://mxr.mozilla.org/">MXR</a>, <a href="https://github.com/pbiggar/trychooser">trychooser</a>,
  <a href="https://bitbucket.org/sfink/mqext">mqext</a>, etc).</li>
</ul>
<p>Granted, not all of these are required. But, they will be for returning
contributors. My point is that there are lots of steps here. And, every
one of them represents a point where someone could get frustrated and
bail -- a point where Mozilla loses a potential contributor.</p>
<p>Ever since I started at Mozilla, I've been thinking of ways this could
be done better. While the
<a href="https://developer.mozilla.org/En/Developer_Guide">Developer Guide</a>
on MDN has improved drastically in the last year, there are still many
ways the process could be improved and streamlined.</p>
<p>In <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=751795">bug 751795</a>,
I've put forward the groundwork of a tool to make the developer
experience more user friendly. Yes, this is a vague goal, so let me go
in to further detail.</p>
<p>What I've submitted in the bug is essentially a framework for
performing common actions related to the build system and source tree.
These actions are defined as methods in Python code. Hooking it all
together is a command-line interface which is launched via a short
script in the root directory called <em>mach</em> (<em>mach</em> is German for <em>do</em>).
Since actions speak louder than words, here's an example:</p>
<pre><code>$ ./mach

usage: mach command [command arguments]

This program is your main control point for the Mozilla source tree.

To perform an action, specify it as the first argument. Here are some common
actions:

  mach build         Build the source tree.
  mach help          Show full help.
  mach xpcshell-test Run xpcshell test(s).

To see more help for a specific action, run:

  mach &lt;command&gt; --help

e.g. mach build --help
</code></pre>
<p>And, going into a sub-command:</p>
<pre><code>$ ./mach xpcshell-test --help

usage: mach xpcshell-test [-h] [--debug] [TEST]

positional arguments:
  TEST         Test to run. Can be specified as a single JS file, an
               xpcshell.ini manifest file, a directory, or omitted. If
               omitted, the entire xpcshell suite is executed.

optional arguments:
  -h, --help   show this help message and exit
  --debug, -d  Run test in debugger.
</code></pre>
<p>Now, I've focused effort at this stage on performing actions after the
initial build environment is configured. The reason is this is
low-hanging fruit and easily allows me to create a proof-of-concept.
But, I have many more ideas that I'd eventually like to see implemented.</p>
<p>One of my grand ideas is to have some kind of setup wizard guide
you through the first time you use <em>mach</em>. It can start by asking the
basics: "Which application do you want to build?" "Release or Debug?"
"Clang or GCC?" "Should I install Clang for you?" It could also be more
intelligent about installing dependencies. "I see you are using Ubuntu
and are missing required packages X and Y. Would you like me to install
them?" And, why stop at a command-line interface? There's no reason a
graphical frontend (perhaps Tcl/Tk) couldn't be implemented!</p>
<p>The setup wizard could even encompass configuring your source control
system for proper patch generation by ensuring your tree-local <em>.hg/hgrc</em>
or <em>.git/config</em> files have the proper settings. We could even ask you
for Bugzilla credentials so you could interact with Bugzilla directly
from the command-line.</p>
<p>Once we have all of the basic configs in place, it's just a matter of
hooking up the plumbing. Want to submit a patch for review? We could
provide a command for that:</p>
<pre><code>./mach submit-patch

"refactor-foo" is currently on top of your patch queue.

Submit "refactor-foo"?
y/n: y

Enter bug number for patch or leave empty for no existing bug.
Bug number:

OK. A new bug for this patch will be created.

Please enter a one-line summary of the patch:
Summary: Refactor foo subsystem

Is the patch for (r)eview, (f)eedback, or (n)either?
r/f/n: r

I've identified Gregory Szorc (:gps) as a potential reviewer for
this code. If you'd like someone else, please enter their IRC
nickname or e-mail address. Otherwise, press ENTER.
Reviewer:

I'm ready to submit your patch. Press ENTER to continue or CTRL+C to
abort.

Bug 700000 submitted! You can track it at
https://bugzilla.mozilla.org/show_bug.cgi?id=700000
</code></pre>
<p>The framework is extremely flexible and extensible for a few reasons.
First, it encourages all of the core <em>actions</em> to be implemented as
Python modules/methods. Once you have things defined as API calls (not
shell scripts), the environment feels like a cohesive library rather than
a loose collection of shell scripts. Shell scripts have a place, don't get
me wrong. But, they are hard to debug and test (not to mention performance
penalties on Windows). Writing code as reusable libraries with shell
scripts only being the frontend is a more robust approach to software
design.</p>
<p>Second, the command-line driver is implemented as a collection of
sub-commands. This is similar to how version control systems like Git,
Mercurial, and Subversion work. This makes discovery of features
extremely easy: just list the supported commands! Contrast this to our
current build system, where the answer is to consult a wiki (with likely
out-of-date and fragmented information) or <em>gasp</em> try to read the
makefiles in the tree.</p>
<p>My immediate goal for
<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=751795">bug 751795</a> is to
get a minimal framework checked in to the tree with a core design people
are content with. Once that is done, <strong>I'm hoping other people will come
along and implement additional features and commands.</strong> Specifically, I'd
like to see some of the awesome tools like <em>mqext</em> integrated such that
their power can be harnessed without requiring people to first discover
they exist and second install and configure them. I think it is silly for
these obvious productivity wins to go unused by people ignrant of their
existence. If they are valuable, let's ship them as part of a batteries
included environment.</p>
<p>In the long run, I think there are many more uses for this framework.
For starters, it gives us a rallying point around which to organize all
of the Python support/tools code in the tree. Currently, we have things
spread all over the place. Quite frankly, it is a mess. I'd like to have
a unified <em>site-packages</em> tree with all our Python so things are easier to
locate and thus improve.</p>
<p>If nothing else, the tool provides a framework for logging and
formatting activities in a unified way. There are separate log streams:
one for humans, one for machines. Under the hood, they both use the
saming logging infrastructure. When messages are logged, the human
stream is formatted as simple sentences (complete with terminal
encodings and colorization). The machine-destined log stream is
newline-delimited JSON containing the fields that were logged. This
allows analysis of output without having to parse strings. This is how
all log analysis should be done. But, that's for another post. Anyway,
what this all means is that the output for humans can be more readable.
Colors, progress bars: we can do that now.</p>
<p>Over time, I imagine some may want to move logic out of configure and
makefiles and into this tool (because Python is easier to maintain and
debug, IMO). I would love to see that too. But, I want to stress that this
isn't a focus right now. I believe this framework should be supplemental
in the beginning and the official build system should not rely on it. Maybe
that changes in the future. Time will tell.</p>
<p>Anyway, this project is currently just my solo effort. This isn't
captured on a roadmap or anyone's quarterly goals. There is no project page
listing planned features. If you are interested in helping, drop me a line
and/or join in on the bug. Hopefully the core framework will land soon.
Once it does, I'm hoping for an explosion of new, user-friendly
features/commands to make the overall Firefox development experience
smoother.</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://gregoryszorc.com/blog</uri>
    </author>
    <title type="html"><![CDATA[Comparing the Security and Privacy of Browser Syncing]]></title>
    <link rel="alternate" type="text/html" href="http://gregoryszorc.com/blog/2012/04/08/comparing-the-security-and-privacy-of-browser-syncing" />
    <id>http://gregoryszorc.com/blog/2012/04/08/comparing-the-security-and-privacy-of-browser-syncing</id>
    <updated>2012-04-08T21:00:00Z</updated>
    <published>2012-04-08T21:00:00Z</published>
    <category scheme="http://gregoryszorc.com/blog" term="Mozilla" />
    <category scheme="http://gregoryszorc.com/blog" term="security" />
    <category scheme="http://gregoryszorc.com/blog" term="browsers" />
    <category scheme="http://gregoryszorc.com/blog" term="Firefox" />
    <category scheme="http://gregoryszorc.com/blog" term="internet" />
    <summary type="html"><![CDATA[Comparing the Security and Privacy of Browser Syncing]]></summary>
    <content type="html" xml:base="http://gregoryszorc.com/blog/2012/04/08/comparing-the-security-and-privacy-of-browser-syncing"><![CDATA[<p>Many popular web browsers offer built-in synchronization of browser data
(history, bookmarks, passwords, etc) across devices. In this post, I
examine the data security and privacy aspects of some of them.</p>
<h2>Chrome</h2>
<p>Chrome and Chromium have comprehensive support for browser sync.</p>
<p>When you sign in to Chrome (using your Google Account credentials),
Chrome prompts you to set up sync. By default, all data types are
uploaded to Google's servers.</p>
<p>The default behavior is for Chrome to encrypt your passwords before
uploading them to the server. All of your remaining data (history,
bookmarks, etc) is uploaded to Google unencrypted. This means anyone
with access to Google's servers has full access to your history, etc.</p>
<p>Access to the uploaded data is governed by the
<a href="https://www.google.com/chrome/intl/en/privacy.html">Google Chrome Privacy Notice</a>.
This policy (pulled on April 3, 2012) states that the sync data is
governed by the unified
<a href="https://www.google.com/policies/privacy/">Google Privacy Policy</a>.
This policy states (as pulled on April 4, 2012):</p>
<pre><code>We use the information we collect from all of our services to
provide, maintain, protect and improve them, to develop new ones,
and to protect Google and our users. We also use this information
to offer you tailored content â€“ like giving you more relevant
search results and ads.
</code></pre>
<p>In other words, you are granting Google the ability to use your synced
data.</p>
<p>An advanced settings dialog as part of the sync setup allows users to
opt in to local encryption of all data - not just passwords - simply by
clicking a checkbox. This same dialog also allows users to choose an
alternate passphrase (not your Google Account password) for encrypting
data.</p>
<p>For encrypted data, Chrome uses an encryption scheme called Nigori. An
<a href="http://www.links.org/files/nigori-overview.pdf">Overview</a> and <a href="http://www.links.org/files/nigori-protocol.html">protocol
details</a> are
<a href="http://www.links.org/?cat=38">available</a> from the author's website.</p>
<p>This encryption scheme takes the user-supplied passphrase and uses
<a href="http://tools.ietf.org/html/rfc2898">PBKDF2</a> to derive keys. It first
derives a 64 bit salt key, <em>Suser</em>, using 1001 iterations of PBKDF2 with
SHA1 using the username as the salt. Then, it performs 3 more PBKDF2
derivations to produce three 128 bit keys from the original passphrase
using the newly-derived salt key, producing <em>Kuser</em>, <em>Kenc</em>, and
<em>Khmac</em>. For these, the PBKDF2 iteration counts are 1002, 1003, and 1004,
respectively. <em>Kuser</em> and <em>Kenc</em> use AES as the PBKDF2 algorithm.
<em>Kmac</em> uses SHA-1. <em>Kuser</em> is used to authenticate the client with the
server. <em>Kenc</em> and <em>Kmac</em> are used to encrypt and sign data,
respectively. Data is encrypted with AES-128 in CBC mode with a 16 byte
IV. (It is worth noting that Chrome
<a href="https://src.chromium.org/viewvc/chrome/trunk/src/sync/util/nigori.cc?annotate=129476#l157">does not use</a>
a cryptographically-secure random number generator for the IV. I don't
believe this amounts to anything more than a mild embarassment in this
case.)</p>
<p>When someone wishes to sync to a new Chrome instance, she simply enters her
Google Account username and password (or custom sync passphrase)
and data is downloaded from Google's servers and applied. The pre-PBKDF2
passphrase is all that is needed. The new Chrome instance remembers
the passphrase and syncing is automatic from that point on.</p>
<h2>Opera</h2>
<p>Opera supports syncing via <a href="http://www.opera.com/link/">Opera Link</a>.
Opera Link supports syncing bookmarks, history, passwords, search engine
plugins, and other data types.</p>
<p>Opera is not open source and I have not been able to find technical
details on how Opera Link is implemented. The two sources I found are a
<a href="http://my.opera.com/operalink/blog/2011/05/03/security-of-synchronized-passwords-with-opera-link">blog post</a>
and the <a href="http://www.opera.com/browser/tutorials/link/">Guide to Using Opera Link</a>.</p>
<p>From those two documents, we know that Opera locally encrypts passwords.
However, it is unclear whether other data is also encrypted locally. I
can interpret the blog post to go either way. (If someone knows, please
leave a comment with some kind of proof and I'll update this post.)</p>
<p>The blog post gives a high-level overview of how encryption works. A
lone comment is the only source of technical details:</p>
<pre><code>for encryption we use AES-128, and we use a random salt that is
part of each "blob" (one blob is a single field in each password
entry)
</code></pre>
<p>As commenters in that post have pointed out, that is still very short on
technical details.</p>
<p>What I <em>think</em> is going on is that when you initially set up Opera Link,
it generates a full-entropy 128 bit key from a random number generator.
Uploaded data is encrypted with this key using AES-128 with a
randomly-generated IV (or <em>salt</em> using terms from the blog post). The
ciphertext and the IV are uploaded to Opera's servers. There may be HMAC
or some other form of message verification involved, but I could find no
evidence of that.</p>
<p>Since Opera Link is tied to your Opera Account password, I'm guessing
that Opera uses PBKDF2 to derive a key from the password. It then uses
this key to symmetrically encrypt the randomly-generated encryption key.
It then uploads the encrypted encryption key to Opera's servers.</p>
<p>When someone wishes to sync with a new Opera instance, she simply enters
her Opera Account credentials on the new Opera and Opera Link is set up
automatically. This is a one-time set-up process.</p>
<p>Data uploaded with Opera Link is goverened by an
<a href="http://www.opera.com/privacy/#operalink">Opera Link Privacy Policy</a>.
This policy states (pulled on April 4, 2012):</p>
<pre><code>Opera will never disclose, share, or distribute an individualâ€™s
Linked data to any third party except where required by law or
regulation, or in cases where you have chosen to grant access to your
data to an Opera or third party application or service using Opera
Link API. Opera restricts internal access to this information
exclusively to those who need it for the operation of the Link
service.
</code></pre>
<h2>Safari</h2>
<p>Safari supports syncing via iCloud. Its offerings appear to currently be
limited to bookmarks, possibly because iCloud is a relatively new
offering from Apple.</p>
<p>Configuration of iCloud is something that typically happens outside of
Safari at the OS level. And, iCloud is deeply tied to your Apple ID.
Users typically sign up for an Apple ID then enable iCloud support for a
Safari feature (currently just bookmarks). During Apple ID setup, iCloud
asks you some security questions. To connect a new device, you simply
sign in to Apple ID, enable iCloud, and things just work.</p>
<p>Technical details of iCloud's security model are hard to come by. What we
do appear to know is that everything except email and
notes is encrypted on Apple's servers. However, the current theory is
that this encryption only occurs after the data hits Apple's servers or
that Apple has the encryption key and can read your data without your
knowledge.</p>
<p>Data uploaded to iCloud is governed by the
<a href="https://www.apple.com/legal/icloud/en/terms.html">iCloud Terms and Conditions</a>.
This policy states (pulled on April 7, 2012):</p>
<pre><code>You further consent and agree that Apple may collect, use, transmit,
process and maintain information related to your Account, and any
devices or computers registered thereunder, for purposes of providing
the Service, and any features therein, to you. Information collected
by Apple when you use the Service may also include technical or
diagnostic information related to your use that may be used by Apple
to support, improve and enhance Appleâ€™s products and services.
</code></pre>
<p>If data is readable by Apple, this policy grants Apple the right to use it.</p>
<p>I'm not going to speculate about the technical details of Apple's
encryption model because I couldn't find any non-speculative sources to base
it on. If you want to read the speculation of others, see Ars Technica
posts
<a href="http://arstechnica.com/apple/news/2012/03/how-safe-is-icloud-data-ars-investigates.ars">1</a>,
<a href="http://arstechnica.com/apple/news/2012/04/apple-holds-the-master-key-when-it-comes-to-icloud-security-privacy.ars">2</a>,
and <a href="http://arstechnica.com/apple/news/2012/04/can-apple-give-police-a-key-to-your-encrypted-iphone-data-ars-investigates.ars">3</a>
and Matthew Green's <a href="http://blog.cryptographyengineering.com/2012/04/icloud-who-holds-key.html">response</a>.</p>
<h2>Internet Explorer</h2>
<p>Internet Explorer supports syncing of favorites via Windows Live Mesh.</p>
<p>This was discovered after this post was originally written, which is why
there are no additional details.</p>
<h2>Firefox</h2>
<p>Firefox has built-in support for syncing browser data via Firefox Sync.
It doesn't sync as many data types as Chrome, but the basics (history,
bookmarks, passwords, add-ons) are all there.</p>
<p>When you initially create a Firefox Sync account, you are asked to
create a Mozilla Services account by entering an e-mail address and
password. Once this process is done, Firefox uploads data to the sync
server in the background.</p>
<p>By default, all data is encrypted locally before being uploaded to the
server. There is no option to disable client-side encryption.</p>
<p>Data uploaded to the server is governed by the
<a href="https://services.mozilla.com/privacy-policy/">Firefox Sync Privacy Policy</a>.
The summary (pulled on April 4, 2012) is quite clear:</p>
<pre><code>* Your data is only used to provide the Firefox Sync service.
* Firefox Sync on your computer encrypts your data before sending
  it to us so the data isnâ€™t sitting around on our servers in a
  usable form.
* We donâ€™t sell your data or use ad networks on the Firefox Sync
  webpages or service.
</code></pre>
<p>While Mozilla provides a default server for Firefox Sync, the server
is open source (see their
<a href="http://docs.services.mozilla.com/">documentation</a>) and
anybody can run a server and point their clients at it.</p>
<p>When a new account is created, Firefox creates a full-entropy 128 bit key
via random number generation. It then derives two 256 bit keys through
SHA-256 HMAC-based HKDF
(<a href="http://tools.ietf.org/html/rfc5869">RFC 5869</a>). This key pair
effectively constitutes a root encryption and signing key.</p>
<p>Firefox then generates a completely new pair of full-entropy 256 bit
keys via random number generation. This key pair is used to encrypt and
sign all data uploaded to the server. This second key pair is called a
<em>collection key</em>.</p>
<p>Firefox takes your synced data, and performs AES-256 in CBC mode with a 16
byte randomly-generated IV (unique for each record) with the <em>collection
key's</em> symmetric encryption key. The ciphertext is then hashed with the
HMAC key. The ciphertext, HMAC, and IV are uploaded to the server.</p>
<p>The <em>collection key</em> is encrypted and signed with the root key pair and
uploaded to the server as well. The root keys remain on the client and are
never transmitted to the server.</p>
<p>Technical details of the full crypto model are
<a href="http://docs.services.mozilla.com/sync/storageformat5.html">available</a>.</p>
<p>The e-mail and password for the Mozilla Services account are used to
authenticate the HTTPS channel with the server using HTTP Basic Auth.</p>
<p>When you wish to connect another Firefox instance to your Firefox Sync
account, the root 128 bit key must be transferred to the new device.
Firefox supports manually entering the 128 bit key as a 26 character
value. More commonly,
<a href="http://grouper.ieee.org/groups/1363/Research/contributions/hao-ryan-2008.pdf">Password Authenticated Key Exchange by Juggling</a>
(J-PAKE) is used. One device displays 12 characters and establishes a
channel with a central brokering server. The same 12 characters are
entered on the pairing device. The two devices establish a
cryptographically secure channel between them and proceed to exchange
the Mozilla Account credentials, server information, and the 128 bit
root key. While the J-PAKE server is hosted by Mozilla, the channel is
secured between both endpoints, so the server operator can't read the
root key as it passes through it.</p>
<p>The new client then derives the root key pair via HKDF, downloads,
verifies, and decrypts the collection key from the server, then
uses that key pair for all subsequent encryption and verification
operations.</p>
<p>Once a client has been paired, it holds on to the root key indefinitely
and a user doesn't need to take any subsequent action for syncing to
occur.</p>
<h2>LastPass</h2>
<p><a href="https://lastpass.com/">LastPass</a> isn't a browser, but a password
manager that can be integrated with all the popular browsers. I thought
it would be interesting to throw it into the comparison, especially
since LastPass is perceived to have an excellent security model.</p>
<p>Technical details of LastPass's security model are
<a href="http://helpdesk.lastpass.com/security-options/password-iterations-pbkdf2/">available</a>
in the LastPass User Manual. The remaining details are
<a href="https://lastpass.com/support.php?cmd=showfaq&amp;id=1096">found</a> on a
help desk answer.</p>
<p>LastPass encrypts all of your data locally before uploading it to the
LastPass servers. It does this by making use of a master password.</p>
<p>Data uploaded to LastPass's servers is governed by a
<a href="https://lastpass.com/aboutus_privacy.php">Privacy Statement</a>. The
summary that best reflects it (as pulled on April 4, 2012) is:</p>
<pre><code>We don't allow you to send LastPass critically important information
like your usernames, passwords, account notes, and LastPass master
password; instead your LastPass master password is used locally to
encrypt the important data that's sent to us so that no one,
including LastPass employees ever can access it.
</code></pre>
<p>LastPass performs <em>N</em> iterations (default 500) of PBKDF2 using SHA256
over your master password to produce a 256 bit encryption key. It then
produces one additional iteration to produce a login key. Data is
encrypted locally using AES-256 with the encryption key derived from
your master password.  Encrypted data is uploaded to LastPass's servers.
Your master password is never transmitted to LastPass. Instead, the
login key is used to authenticate communications.</p>
<p>The LastPass web interface downloads encrypted blobs and decrypts them
locally using the PBKDF2-derived encryption key.</p>
<p>To set up a new LastPass client, you download LastPass and present your
username and master password. Typically, the master password needs to be
presented every time you initially access your LastPass data (e.g. the
first time you need to find a password after starting your browser).</p>
<h2>Assessment</h2>
<p>The following chart summarizes the security aspects of different
browsers' sync features. Desirable traits for better security are bolded.</p>
<table border="1">
  <tr>
    <th>Product</th>
    <th>Encryption Defaults</th>
    <th>Can Encrypt Everything?</th>
    <th>Encryption Entropy Source</th>
    <th>Server Knows Decryption Key?</th>
    <th>Server-Side Data Recovery Difficulty</th>
  </tr>
  <tr>
    <td>Chrome</td>
    <td>Passwords encrypted; everything else stored in cleartext</td>
    <td><strong>Yes</strong></td>
    <td>User-supplied passphrase</td>
    <td>Yes by default (Google Account password). <strong>No if using custom
        passphrase</strong></td>
    <td>No effort for unencrypted data. <strong>1001 PBKDF2-SHA1 + 1003
        PBKDF2-AES iterations for encrypted data.</strong></td>
  </tr>
  <tr>
    <td>Opera</td>
    <td>Passwords encrypted; everything else unknown</td>
    <td>Unknown</td>
    <td>User-supplied passphrase</td>
    <td>Yes. Can't change.</td>
    <td>Unknown</td>
  </tr>
  <tr>
    <td>Safari</td>
    <td>On remote disks only?</td>
    <td>No</td>
    <td>Unknown. User-supplied password?</td>
    <td>Yes (probably)</td>
    <td>No effort for Apple (apparently)</td>
  </tr>
  <tr>
    <td>Firefox</td>
    <td><strong>Everything</strong></td>
    <td><strong>Yes</strong> (default)</td>
    <td><strong>128 bit randomly generated key</strong></td>
    <td><strong>No</strong></td>
    <td><strong>128 bit key + HKDF into AES-256</strong></td>
  </tr>
  <tr>
    <td>LastPass</td>
    <td><strong>Everything</strong> (only syncs passwords and notes)</td>
    <td><strong>Yes</strong> (default)</td>
    <td>User-supplied passphrase</td>
    <td><strong>No</strong></td>
    <td><strong>Variable PBKDF2-SHA256 iterations (default 500)</strong></td>
  </tr>
</table>

<p>So much about Safari is unknown, so it will be ignored.</p>
<p>Firefox and LastPass (and possibly Opera) are the only products that
encrypt all data by default. Chrome (and possibly Opera) is the only
product that does not encrypt all data by default.</p>
<p>Firefox and LastPass are the only products that don't send the entropy
source to the server by default. Chrome uses the Google Account
password by default and this is sent to Google when logging in to
various services. Opera sends the password to Opera when logging in to
your Opera Account. Google allows you to change the entropy source to a
custom passphrase so Google doesn't receive the entropy source.
Opera does not.</p>
<p>Sending the entropy source to the server is an important security
consideration because it means you are giving the key to your data to
someone else. Even if your data is encrypted locally, someone with the
key can decrypt it. Services that send the entropy source to the server
are subject to man-in-the-middle attacks and could be subverted by
malicious or legal actions occurring on the server side (e.g. the
service operator could be compelled through a subpoena to capture your
entropy source and use it to decrypt your stored data, possibly without
your knowledge).</p>
<p>Firefox is the only product whose encryption source is full-entropy. All
other products rely on taking a user-supplied passphrase and using
"key-stretching" via PBKDF2 to increase the cost of a brute-force
search.</p>
<p>PBKDF2-derived encryption keys are common in the examined products.
It is worth noting that PBKDF2 can be susceptible to dictionary and
brute-force attacks because assumptions can be made about the input
passphrase, such as its entropy and length. Systems often enforce rules
on the source passphrase (e.g. between 5 and 15 characters and contains
only letters and numbers). When cracking keys, you normally iterate
through every possible permutation until you find one that works. When
you can make assumptions about the input, you can eliminate a large
number of these permutations. The products that use PBKDF2 are
theoretically susceptible to this weakened brute-force search.</p>
<p>Since Firefox does not rely on PBKDF2, it is the only examined product not
theoretically susceptible to a weakened brute-force search. Instead, an
attacker would have to churn through every permutation of a 128 bit root
key, which would take billions of computer-years. (See
<a href="https://en.wikipedia.org/w/index.php?title=Brute-force_attack&amp;oldid=482091625">Brute-force attack</a>
on Wikipedia for more.)</p>
<p>Firefox's additional security comes at the price of more complex device
setup. Firefox users need to physically have a copy of the 128 bit root
key or physical access to 2 devices when pairing. All other products
rely on a passphrase which the user can carry around seemlessly in her
head. In addition, if the Firefox root encryption key is lost, it is
more likely that your data is not recoverable because the key is not in
your head.</p>
<h2>Conclusion</h2>
<p>Considering just the security and privacy aspects, I can only recommend
two of the examined products: Firefox Sync and LastPass. I am recommending
them because they encrypt all data locally by default and they do not
send the encryption key source to the server. Of these two, Firefox
Sync is more secure for reasons outlined above.</p>
<p>I can't recommend Safari because details about iCloud's encryption
strategy are unknown. Furthermore, it appears Apple can recover your
(possibly) encrypted data without your knowledge.</p>
<p>I can't recommend Opera because your encryption key source (your Opera Account
password) is sent to Opera's servers. Furthermore, not enough technical
details of Opera Link are available to vet it.</p>
<p>I can't recommend Chrome (at least in its default configuration) because
it doesn't encrypt all data locally (only passwords) and you
periodically send the encryption key source (your Google Account password)
to Google's servers when using other Google services. If you enable
encryption of all data and use a custom passphrase, Chrome's security model
is essentially identical to LastPass's and thus can be recommended.</p>
<p><strong>Disclaimer</strong>: I am currently employed by Mozilla and work on
Firefox Sync. That being said, I believe this post has been objective
and not subject to my bias towards Firefox and/or Firefox Sync. If you
feel differently, please leave a comment and I will adjust the post as
necessary.</p>
<p><strong>Edit 2012-04-16</strong> Note that IE supports Bookmark sync via Windows Live
Mesh (thanks to Nick Richards for pointing it out in the comments). Also
removed an incorrect sentence from the Chrome section which incorrectly
stated that the PBKDF2 iteration count was part of the hash in each
iteration.</p>]]></content>
  </entry>
</feed>
